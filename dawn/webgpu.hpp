/**
 * This file is part of the "Learn WebGPU for C++" book.
 *   https://github.com/eliemichel/LearnWebGPU
 *
 * MIT License
 * Copyright (c) 2022-2024 Elie Michel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Exactly one of your source files must #define WEBGPU_CPP_IMPLEMENTATION
 * before including this header.
 * 
 * NB: This file has been generated by the webgpu-cpp generator
 *   (see https://github.com/eliemichel/webgpu-cpp )
 */

#pragma once

#include <webgpu/webgpu.h>

#include <iostream>
#include <vector>
#include <functional>
#include <cassert>
#include <memory>

#if __EMSCRIPTEN__
#include <emscripten.h>
#endif

#ifdef _MSVC_LANG
#  if _MSVC_LANG >= 202002L
#   define NO_DISCARD [[nodiscard("You should keep this handle alive for as long as the callback may get invoked.")]]
#  elif _MSVC_LANG >= 201703L
#   define NO_DISCARD [[nodiscard]]
#  else
#   define NO_DISCARD
#  endif
#else
#  if __cplusplus >= 202002L
#    define NO_DISCARD [[nodiscard("You should keep this handle alive for as long as the callback may get invoked.")]]
#  elif __cplusplus >= 201703L
#    define NO_DISCARD [[nodiscard]]
#  else
#    define NO_DISCARD
#  endif
#endif

/**
 * A namespace providing a more C++ idiomatic API to WebGPU.
 */
namespace wgpu {

struct DefaultFlag {};
constexpr DefaultFlag Default;

#define HANDLE(Type) \
class Type { \
public: \
	typedef Type S; /* S == Self */ \
	typedef WGPU ## Type W; /* W == WGPU Type */ \
	Type() : m_raw(nullptr) {} \
	Type(const W& w) : m_raw(w) {} \
	operator W&() { return m_raw; } \
	operator const W&() const { return m_raw; } \
	operator bool() const { return m_raw != nullptr; } \
	bool operator==(const Type& other) const { return m_raw == other.m_raw; } \
	bool operator!=(const Type& other) const { return m_raw != other.m_raw; } \
	bool operator==(const W& other) const { return m_raw == other; } \
	bool operator!=(const W& other) const { return m_raw != other; } \
	friend auto operator<<(std::ostream &stream, const S& self) -> std::ostream & { \
		return stream << "<wgpu::" << #Type << " " << self.m_raw << ">"; \
	} \
private: \
	W m_raw; \
public:

#define DESCRIPTOR(Type) \
struct Type : public WGPU ## Type { \
public: \
	typedef Type S; /* S == Self */ \
	typedef WGPU ## Type W; /* W == WGPU Type */ \
	Type() : W() { nextInChain = nullptr; } \
	Type(const W &other) : W(other) { nextInChain = nullptr; } \
	Type(const DefaultFlag &) : W() { setDefault(); } \
	Type& operator=(const DefaultFlag &) { setDefault(); return *this; } \
	friend auto operator<<(std::ostream &stream, const S&) -> std::ostream & { \
		return stream << "<wgpu::" << #Type << ">"; \
	} \
public:

#define STRUCT(Type) \
struct Type : public WGPU ## Type { \
public: \
	typedef Type S; /* S == Self */ \
	typedef WGPU ## Type W; /* W == WGPU Type */ \
	Type() : W() {} \
	Type(const W &other) : W(other) {} \
	Type(const DefaultFlag &) : W() { setDefault(); } \
	Type& operator=(const DefaultFlag &) { setDefault(); return *this; } \
	friend auto operator<<(std::ostream &stream, const S&) -> std::ostream & { \
		return stream << "<wgpu::" << #Type << ">"; \
	} \
public:

#define ENUM(Type) \
class Type { \
public: \
	typedef Type S; /* S == Self */ \
	typedef WGPU ## Type W; /* W == WGPU Type */ \
	constexpr Type() : m_raw(W{}) {} /* Using default value-initialization */ \
	constexpr Type(const W& w) : m_raw(w) {} \
	constexpr operator W() const { return m_raw; } \
	const W m_raw; /* Ideally, this would be private, but then types generated with this macro would not be structural. */

#define ENUM_ENTRY(Name, Value) \
	static constexpr W Name = (W)Value;

#define END };



// Other type aliases
using Flags = uint64_t;
using Bool = uint32_t;
using RenderPassDescriptorMaxDrawCount = WGPURenderPassMaxDrawCount;
using ShaderModuleSPIRVDescriptor = WGPUShaderSourceSPIRV;
using ShaderModuleWGSLDescriptor = WGPUShaderSourceWGSL;
using SurfaceDescriptorFromAndroidNativeWindow = WGPUSurfaceSourceAndroidNativeWindow;
using SurfaceDescriptorFromCanvasHTMLSelector = WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;
using SurfaceDescriptorFromMetalLayer = WGPUSurfaceSourceMetalLayer;
using SurfaceDescriptorFromWaylandSurface = WGPUSurfaceSourceWaylandSurface;
using SurfaceDescriptorFromWindowsHWND = WGPUSurfaceSourceWindowsHWND;
using SurfaceDescriptorFromXcbWindow = WGPUSurfaceSourceXCBWindow;
using SurfaceDescriptorFromXlibWindow = WGPUSurfaceSourceXlibWindow;

// Enumerations
ENUM(WGSLFeatureName)
	ENUM_ENTRY(ReadonlyAndReadwriteStorageTextures, WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures)
	ENUM_ENTRY(Packed4x8IntegerDotProduct, WGPUWGSLFeatureName_Packed4x8IntegerDotProduct)
	ENUM_ENTRY(UnrestrictedPointerParameters, WGPUWGSLFeatureName_UnrestrictedPointerParameters)
	ENUM_ENTRY(PointerCompositeAccess, WGPUWGSLFeatureName_PointerCompositeAccess)
	ENUM_ENTRY(ChromiumTestingUnimplemented, WGPUWGSLFeatureName_ChromiumTestingUnimplemented)
	ENUM_ENTRY(ChromiumTestingUnsafeExperimental, WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental)
	ENUM_ENTRY(ChromiumTestingExperimental, WGPUWGSLFeatureName_ChromiumTestingExperimental)
	ENUM_ENTRY(ChromiumTestingShippedWithKillswitch, WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch)
	ENUM_ENTRY(ChromiumTestingShipped, WGPUWGSLFeatureName_ChromiumTestingShipped)
	ENUM_ENTRY(Force32, WGPUWGSLFeatureName_Force32)
END
ENUM(AdapterType)
	ENUM_ENTRY(DiscreteGPU, WGPUAdapterType_DiscreteGPU)
	ENUM_ENTRY(IntegratedGPU, WGPUAdapterType_IntegratedGPU)
	ENUM_ENTRY(CPU, WGPUAdapterType_CPU)
	ENUM_ENTRY(Unknown, WGPUAdapterType_Unknown)
	ENUM_ENTRY(Force32, WGPUAdapterType_Force32)
END
ENUM(AddressMode)
	ENUM_ENTRY(Undefined, WGPUAddressMode_Undefined)
	ENUM_ENTRY(ClampToEdge, WGPUAddressMode_ClampToEdge)
	ENUM_ENTRY(Repeat, WGPUAddressMode_Repeat)
	ENUM_ENTRY(MirrorRepeat, WGPUAddressMode_MirrorRepeat)
	ENUM_ENTRY(Force32, WGPUAddressMode_Force32)
END
ENUM(AlphaMode)
	ENUM_ENTRY(Opaque, WGPUAlphaMode_Opaque)
	ENUM_ENTRY(Premultiplied, WGPUAlphaMode_Premultiplied)
	ENUM_ENTRY(Unpremultiplied, WGPUAlphaMode_Unpremultiplied)
	ENUM_ENTRY(Force32, WGPUAlphaMode_Force32)
END
ENUM(BackendType)
	ENUM_ENTRY(Undefined, WGPUBackendType_Undefined)
	ENUM_ENTRY(Null, WGPUBackendType_Null)
	ENUM_ENTRY(WebGPU, WGPUBackendType_WebGPU)
	ENUM_ENTRY(D3D11, WGPUBackendType_D3D11)
	ENUM_ENTRY(D3D12, WGPUBackendType_D3D12)
	ENUM_ENTRY(Metal, WGPUBackendType_Metal)
	ENUM_ENTRY(Vulkan, WGPUBackendType_Vulkan)
	ENUM_ENTRY(OpenGL, WGPUBackendType_OpenGL)
	ENUM_ENTRY(OpenGLES, WGPUBackendType_OpenGLES)
	ENUM_ENTRY(Force32, WGPUBackendType_Force32)
END
ENUM(BlendFactor)
	ENUM_ENTRY(Undefined, WGPUBlendFactor_Undefined)
	ENUM_ENTRY(Zero, WGPUBlendFactor_Zero)
	ENUM_ENTRY(One, WGPUBlendFactor_One)
	ENUM_ENTRY(Src, WGPUBlendFactor_Src)
	ENUM_ENTRY(OneMinusSrc, WGPUBlendFactor_OneMinusSrc)
	ENUM_ENTRY(SrcAlpha, WGPUBlendFactor_SrcAlpha)
	ENUM_ENTRY(OneMinusSrcAlpha, WGPUBlendFactor_OneMinusSrcAlpha)
	ENUM_ENTRY(Dst, WGPUBlendFactor_Dst)
	ENUM_ENTRY(OneMinusDst, WGPUBlendFactor_OneMinusDst)
	ENUM_ENTRY(DstAlpha, WGPUBlendFactor_DstAlpha)
	ENUM_ENTRY(OneMinusDstAlpha, WGPUBlendFactor_OneMinusDstAlpha)
	ENUM_ENTRY(SrcAlphaSaturated, WGPUBlendFactor_SrcAlphaSaturated)
	ENUM_ENTRY(Constant, WGPUBlendFactor_Constant)
	ENUM_ENTRY(OneMinusConstant, WGPUBlendFactor_OneMinusConstant)
	ENUM_ENTRY(Src1, WGPUBlendFactor_Src1)
	ENUM_ENTRY(OneMinusSrc1, WGPUBlendFactor_OneMinusSrc1)
	ENUM_ENTRY(Src1Alpha, WGPUBlendFactor_Src1Alpha)
	ENUM_ENTRY(OneMinusSrc1Alpha, WGPUBlendFactor_OneMinusSrc1Alpha)
	ENUM_ENTRY(Force32, WGPUBlendFactor_Force32)
END
ENUM(BlendOperation)
	ENUM_ENTRY(Undefined, WGPUBlendOperation_Undefined)
	ENUM_ENTRY(Add, WGPUBlendOperation_Add)
	ENUM_ENTRY(Subtract, WGPUBlendOperation_Subtract)
	ENUM_ENTRY(ReverseSubtract, WGPUBlendOperation_ReverseSubtract)
	ENUM_ENTRY(Min, WGPUBlendOperation_Min)
	ENUM_ENTRY(Max, WGPUBlendOperation_Max)
	ENUM_ENTRY(Force32, WGPUBlendOperation_Force32)
END
ENUM(BufferBindingType)
	ENUM_ENTRY(Undefined, WGPUBufferBindingType_Undefined)
	ENUM_ENTRY(Uniform, WGPUBufferBindingType_Uniform)
	ENUM_ENTRY(Storage, WGPUBufferBindingType_Storage)
	ENUM_ENTRY(ReadOnlyStorage, WGPUBufferBindingType_ReadOnlyStorage)
	ENUM_ENTRY(Force32, WGPUBufferBindingType_Force32)
END
ENUM(BufferMapAsyncStatus)
	ENUM_ENTRY(Success, WGPUBufferMapAsyncStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUBufferMapAsyncStatus_InstanceDropped)
	ENUM_ENTRY(ValidationError, WGPUBufferMapAsyncStatus_ValidationError)
	ENUM_ENTRY(Unknown, WGPUBufferMapAsyncStatus_Unknown)
	ENUM_ENTRY(DeviceLost, WGPUBufferMapAsyncStatus_DeviceLost)
	ENUM_ENTRY(DestroyedBeforeCallback, WGPUBufferMapAsyncStatus_DestroyedBeforeCallback)
	ENUM_ENTRY(UnmappedBeforeCallback, WGPUBufferMapAsyncStatus_UnmappedBeforeCallback)
	ENUM_ENTRY(MappingAlreadyPending, WGPUBufferMapAsyncStatus_MappingAlreadyPending)
	ENUM_ENTRY(OffsetOutOfRange, WGPUBufferMapAsyncStatus_OffsetOutOfRange)
	ENUM_ENTRY(SizeOutOfRange, WGPUBufferMapAsyncStatus_SizeOutOfRange)
	ENUM_ENTRY(Force32, WGPUBufferMapAsyncStatus_Force32)
END
ENUM(BufferMapState)
	ENUM_ENTRY(Unmapped, WGPUBufferMapState_Unmapped)
	ENUM_ENTRY(Pending, WGPUBufferMapState_Pending)
	ENUM_ENTRY(Mapped, WGPUBufferMapState_Mapped)
	ENUM_ENTRY(Force32, WGPUBufferMapState_Force32)
END
ENUM(CallbackMode)
	ENUM_ENTRY(WaitAnyOnly, WGPUCallbackMode_WaitAnyOnly)
	ENUM_ENTRY(AllowProcessEvents, WGPUCallbackMode_AllowProcessEvents)
	ENUM_ENTRY(AllowSpontaneous, WGPUCallbackMode_AllowSpontaneous)
	ENUM_ENTRY(Force32, WGPUCallbackMode_Force32)
END
ENUM(CompareFunction)
	ENUM_ENTRY(Undefined, WGPUCompareFunction_Undefined)
	ENUM_ENTRY(Never, WGPUCompareFunction_Never)
	ENUM_ENTRY(Less, WGPUCompareFunction_Less)
	ENUM_ENTRY(Equal, WGPUCompareFunction_Equal)
	ENUM_ENTRY(LessEqual, WGPUCompareFunction_LessEqual)
	ENUM_ENTRY(Greater, WGPUCompareFunction_Greater)
	ENUM_ENTRY(NotEqual, WGPUCompareFunction_NotEqual)
	ENUM_ENTRY(GreaterEqual, WGPUCompareFunction_GreaterEqual)
	ENUM_ENTRY(Always, WGPUCompareFunction_Always)
	ENUM_ENTRY(Force32, WGPUCompareFunction_Force32)
END
ENUM(CompilationInfoRequestStatus)
	ENUM_ENTRY(Success, WGPUCompilationInfoRequestStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUCompilationInfoRequestStatus_InstanceDropped)
	ENUM_ENTRY(Error, WGPUCompilationInfoRequestStatus_Error)
	ENUM_ENTRY(DeviceLost, WGPUCompilationInfoRequestStatus_DeviceLost)
	ENUM_ENTRY(Unknown, WGPUCompilationInfoRequestStatus_Unknown)
	ENUM_ENTRY(Force32, WGPUCompilationInfoRequestStatus_Force32)
END
ENUM(CompilationMessageType)
	ENUM_ENTRY(Error, WGPUCompilationMessageType_Error)
	ENUM_ENTRY(Warning, WGPUCompilationMessageType_Warning)
	ENUM_ENTRY(Info, WGPUCompilationMessageType_Info)
	ENUM_ENTRY(Force32, WGPUCompilationMessageType_Force32)
END
ENUM(CompositeAlphaMode)
	ENUM_ENTRY(Auto, WGPUCompositeAlphaMode_Auto)
	ENUM_ENTRY(Opaque, WGPUCompositeAlphaMode_Opaque)
	ENUM_ENTRY(Premultiplied, WGPUCompositeAlphaMode_Premultiplied)
	ENUM_ENTRY(Unpremultiplied, WGPUCompositeAlphaMode_Unpremultiplied)
	ENUM_ENTRY(Inherit, WGPUCompositeAlphaMode_Inherit)
	ENUM_ENTRY(Force32, WGPUCompositeAlphaMode_Force32)
END
ENUM(CreatePipelineAsyncStatus)
	ENUM_ENTRY(Success, WGPUCreatePipelineAsyncStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUCreatePipelineAsyncStatus_InstanceDropped)
	ENUM_ENTRY(ValidationError, WGPUCreatePipelineAsyncStatus_ValidationError)
	ENUM_ENTRY(InternalError, WGPUCreatePipelineAsyncStatus_InternalError)
	ENUM_ENTRY(DeviceLost, WGPUCreatePipelineAsyncStatus_DeviceLost)
	ENUM_ENTRY(DeviceDestroyed, WGPUCreatePipelineAsyncStatus_DeviceDestroyed)
	ENUM_ENTRY(Unknown, WGPUCreatePipelineAsyncStatus_Unknown)
	ENUM_ENTRY(Force32, WGPUCreatePipelineAsyncStatus_Force32)
END
ENUM(CullMode)
	ENUM_ENTRY(Undefined, WGPUCullMode_Undefined)
	ENUM_ENTRY(None, WGPUCullMode_None)
	ENUM_ENTRY(Front, WGPUCullMode_Front)
	ENUM_ENTRY(Back, WGPUCullMode_Back)
	ENUM_ENTRY(Force32, WGPUCullMode_Force32)
END
ENUM(DeviceLostReason)
	ENUM_ENTRY(Unknown, WGPUDeviceLostReason_Unknown)
	ENUM_ENTRY(Destroyed, WGPUDeviceLostReason_Destroyed)
	ENUM_ENTRY(InstanceDropped, WGPUDeviceLostReason_InstanceDropped)
	ENUM_ENTRY(FailedCreation, WGPUDeviceLostReason_FailedCreation)
	ENUM_ENTRY(Force32, WGPUDeviceLostReason_Force32)
END
ENUM(ErrorFilter)
	ENUM_ENTRY(Validation, WGPUErrorFilter_Validation)
	ENUM_ENTRY(OutOfMemory, WGPUErrorFilter_OutOfMemory)
	ENUM_ENTRY(Internal, WGPUErrorFilter_Internal)
	ENUM_ENTRY(Force32, WGPUErrorFilter_Force32)
END
ENUM(ErrorType)
	ENUM_ENTRY(NoError, WGPUErrorType_NoError)
	ENUM_ENTRY(Validation, WGPUErrorType_Validation)
	ENUM_ENTRY(OutOfMemory, WGPUErrorType_OutOfMemory)
	ENUM_ENTRY(Internal, WGPUErrorType_Internal)
	ENUM_ENTRY(Unknown, WGPUErrorType_Unknown)
	ENUM_ENTRY(DeviceLost, WGPUErrorType_DeviceLost)
	ENUM_ENTRY(Force32, WGPUErrorType_Force32)
END
ENUM(ExternalTextureRotation)
	ENUM_ENTRY(Rotate0Degrees, WGPUExternalTextureRotation_Rotate0Degrees)
	ENUM_ENTRY(Rotate90Degrees, WGPUExternalTextureRotation_Rotate90Degrees)
	ENUM_ENTRY(Rotate180Degrees, WGPUExternalTextureRotation_Rotate180Degrees)
	ENUM_ENTRY(Rotate270Degrees, WGPUExternalTextureRotation_Rotate270Degrees)
	ENUM_ENTRY(Force32, WGPUExternalTextureRotation_Force32)
END
ENUM(FeatureName)
	ENUM_ENTRY(DepthClipControl, WGPUFeatureName_DepthClipControl)
	ENUM_ENTRY(Depth32FloatStencil8, WGPUFeatureName_Depth32FloatStencil8)
	ENUM_ENTRY(TimestampQuery, WGPUFeatureName_TimestampQuery)
	ENUM_ENTRY(TextureCompressionBC, WGPUFeatureName_TextureCompressionBC)
	ENUM_ENTRY(TextureCompressionETC2, WGPUFeatureName_TextureCompressionETC2)
	ENUM_ENTRY(TextureCompressionASTC, WGPUFeatureName_TextureCompressionASTC)
	ENUM_ENTRY(IndirectFirstInstance, WGPUFeatureName_IndirectFirstInstance)
	ENUM_ENTRY(ShaderF16, WGPUFeatureName_ShaderF16)
	ENUM_ENTRY(RG11B10UfloatRenderable, WGPUFeatureName_RG11B10UfloatRenderable)
	ENUM_ENTRY(BGRA8UnormStorage, WGPUFeatureName_BGRA8UnormStorage)
	ENUM_ENTRY(Float32Filterable, WGPUFeatureName_Float32Filterable)
	ENUM_ENTRY(Subgroups, WGPUFeatureName_Subgroups)
	ENUM_ENTRY(SubgroupsF16, WGPUFeatureName_SubgroupsF16)
	ENUM_ENTRY(DawnInternalUsages, WGPUFeatureName_DawnInternalUsages)
	ENUM_ENTRY(DawnMultiPlanarFormats, WGPUFeatureName_DawnMultiPlanarFormats)
	ENUM_ENTRY(DawnNative, WGPUFeatureName_DawnNative)
	ENUM_ENTRY(ChromiumExperimentalTimestampQueryInsidePasses, WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses)
	ENUM_ENTRY(ImplicitDeviceSynchronization, WGPUFeatureName_ImplicitDeviceSynchronization)
	ENUM_ENTRY(SurfaceCapabilities, WGPUFeatureName_SurfaceCapabilities)
	ENUM_ENTRY(TransientAttachments, WGPUFeatureName_TransientAttachments)
	ENUM_ENTRY(MSAARenderToSingleSampled, WGPUFeatureName_MSAARenderToSingleSampled)
	ENUM_ENTRY(DualSourceBlending, WGPUFeatureName_DualSourceBlending)
	ENUM_ENTRY(D3D11MultithreadProtected, WGPUFeatureName_D3D11MultithreadProtected)
	ENUM_ENTRY(ANGLETextureSharing, WGPUFeatureName_ANGLETextureSharing)
	ENUM_ENTRY(ChromiumExperimentalSubgroups, WGPUFeatureName_ChromiumExperimentalSubgroups)
	ENUM_ENTRY(ChromiumExperimentalSubgroupUniformControlFlow, WGPUFeatureName_ChromiumExperimentalSubgroupUniformControlFlow)
	ENUM_ENTRY(PixelLocalStorageCoherent, WGPUFeatureName_PixelLocalStorageCoherent)
	ENUM_ENTRY(PixelLocalStorageNonCoherent, WGPUFeatureName_PixelLocalStorageNonCoherent)
	ENUM_ENTRY(Unorm16TextureFormats, WGPUFeatureName_Unorm16TextureFormats)
	ENUM_ENTRY(Snorm16TextureFormats, WGPUFeatureName_Snorm16TextureFormats)
	ENUM_ENTRY(MultiPlanarFormatExtendedUsages, WGPUFeatureName_MultiPlanarFormatExtendedUsages)
	ENUM_ENTRY(MultiPlanarFormatP010, WGPUFeatureName_MultiPlanarFormatP010)
	ENUM_ENTRY(HostMappedPointer, WGPUFeatureName_HostMappedPointer)
	ENUM_ENTRY(MultiPlanarRenderTargets, WGPUFeatureName_MultiPlanarRenderTargets)
	ENUM_ENTRY(MultiPlanarFormatNv12a, WGPUFeatureName_MultiPlanarFormatNv12a)
	ENUM_ENTRY(FramebufferFetch, WGPUFeatureName_FramebufferFetch)
	ENUM_ENTRY(BufferMapExtendedUsages, WGPUFeatureName_BufferMapExtendedUsages)
	ENUM_ENTRY(AdapterPropertiesMemoryHeaps, WGPUFeatureName_AdapterPropertiesMemoryHeaps)
	ENUM_ENTRY(AdapterPropertiesD3D, WGPUFeatureName_AdapterPropertiesD3D)
	ENUM_ENTRY(AdapterPropertiesVk, WGPUFeatureName_AdapterPropertiesVk)
	ENUM_ENTRY(R8UnormStorage, WGPUFeatureName_R8UnormStorage)
	ENUM_ENTRY(FormatCapabilities, WGPUFeatureName_FormatCapabilities)
	ENUM_ENTRY(DrmFormatCapabilities, WGPUFeatureName_DrmFormatCapabilities)
	ENUM_ENTRY(Norm16TextureFormats, WGPUFeatureName_Norm16TextureFormats)
	ENUM_ENTRY(MultiPlanarFormatNv16, WGPUFeatureName_MultiPlanarFormatNv16)
	ENUM_ENTRY(MultiPlanarFormatNv24, WGPUFeatureName_MultiPlanarFormatNv24)
	ENUM_ENTRY(MultiPlanarFormatP210, WGPUFeatureName_MultiPlanarFormatP210)
	ENUM_ENTRY(MultiPlanarFormatP410, WGPUFeatureName_MultiPlanarFormatP410)
	ENUM_ENTRY(SharedTextureMemoryVkDedicatedAllocation, WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation)
	ENUM_ENTRY(SharedTextureMemoryAHardwareBuffer, WGPUFeatureName_SharedTextureMemoryAHardwareBuffer)
	ENUM_ENTRY(SharedTextureMemoryDmaBuf, WGPUFeatureName_SharedTextureMemoryDmaBuf)
	ENUM_ENTRY(SharedTextureMemoryOpaqueFD, WGPUFeatureName_SharedTextureMemoryOpaqueFD)
	ENUM_ENTRY(SharedTextureMemoryZirconHandle, WGPUFeatureName_SharedTextureMemoryZirconHandle)
	ENUM_ENTRY(SharedTextureMemoryDXGISharedHandle, WGPUFeatureName_SharedTextureMemoryDXGISharedHandle)
	ENUM_ENTRY(SharedTextureMemoryD3D11Texture2D, WGPUFeatureName_SharedTextureMemoryD3D11Texture2D)
	ENUM_ENTRY(SharedTextureMemoryIOSurface, WGPUFeatureName_SharedTextureMemoryIOSurface)
	ENUM_ENTRY(SharedTextureMemoryEGLImage, WGPUFeatureName_SharedTextureMemoryEGLImage)
	ENUM_ENTRY(SharedFenceVkSemaphoreOpaqueFD, WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD)
	ENUM_ENTRY(SharedFenceVkSemaphoreSyncFD, WGPUFeatureName_SharedFenceVkSemaphoreSyncFD)
	ENUM_ENTRY(SharedFenceVkSemaphoreZirconHandle, WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle)
	ENUM_ENTRY(SharedFenceDXGISharedHandle, WGPUFeatureName_SharedFenceDXGISharedHandle)
	ENUM_ENTRY(SharedFenceMTLSharedEvent, WGPUFeatureName_SharedFenceMTLSharedEvent)
	ENUM_ENTRY(SharedBufferMemoryD3D12Resource, WGPUFeatureName_SharedBufferMemoryD3D12Resource)
	ENUM_ENTRY(StaticSamplers, WGPUFeatureName_StaticSamplers)
	ENUM_ENTRY(YCbCrVulkanSamplers, WGPUFeatureName_YCbCrVulkanSamplers)
	ENUM_ENTRY(ShaderModuleCompilationOptions, WGPUFeatureName_ShaderModuleCompilationOptions)
	ENUM_ENTRY(DawnLoadResolveTexture, WGPUFeatureName_DawnLoadResolveTexture)
	ENUM_ENTRY(DawnPartialLoadResolveTexture, WGPUFeatureName_DawnPartialLoadResolveTexture)
	ENUM_ENTRY(MultiDrawIndirect, WGPUFeatureName_MultiDrawIndirect)
	ENUM_ENTRY(ClipDistances, WGPUFeatureName_ClipDistances)
	ENUM_ENTRY(Force32, WGPUFeatureName_Force32)
END
ENUM(FilterMode)
	ENUM_ENTRY(Undefined, WGPUFilterMode_Undefined)
	ENUM_ENTRY(Nearest, WGPUFilterMode_Nearest)
	ENUM_ENTRY(Linear, WGPUFilterMode_Linear)
	ENUM_ENTRY(Force32, WGPUFilterMode_Force32)
END
ENUM(FrontFace)
	ENUM_ENTRY(Undefined, WGPUFrontFace_Undefined)
	ENUM_ENTRY(CCW, WGPUFrontFace_CCW)
	ENUM_ENTRY(CW, WGPUFrontFace_CW)
	ENUM_ENTRY(Force32, WGPUFrontFace_Force32)
END
ENUM(IndexFormat)
	ENUM_ENTRY(Undefined, WGPUIndexFormat_Undefined)
	ENUM_ENTRY(Uint16, WGPUIndexFormat_Uint16)
	ENUM_ENTRY(Uint32, WGPUIndexFormat_Uint32)
	ENUM_ENTRY(Force32, WGPUIndexFormat_Force32)
END
ENUM(LoadOp)
	ENUM_ENTRY(Undefined, WGPULoadOp_Undefined)
	ENUM_ENTRY(Load, WGPULoadOp_Load)
	ENUM_ENTRY(Clear, WGPULoadOp_Clear)
	ENUM_ENTRY(ExpandResolveTexture, WGPULoadOp_ExpandResolveTexture)
	ENUM_ENTRY(Force32, WGPULoadOp_Force32)
END
ENUM(LoggingType)
	ENUM_ENTRY(Verbose, WGPULoggingType_Verbose)
	ENUM_ENTRY(Info, WGPULoggingType_Info)
	ENUM_ENTRY(Warning, WGPULoggingType_Warning)
	ENUM_ENTRY(Error, WGPULoggingType_Error)
	ENUM_ENTRY(Force32, WGPULoggingType_Force32)
END
ENUM(MapAsyncStatus)
	ENUM_ENTRY(Success, WGPUMapAsyncStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUMapAsyncStatus_InstanceDropped)
	ENUM_ENTRY(Error, WGPUMapAsyncStatus_Error)
	ENUM_ENTRY(Aborted, WGPUMapAsyncStatus_Aborted)
	ENUM_ENTRY(Unknown, WGPUMapAsyncStatus_Unknown)
	ENUM_ENTRY(Force32, WGPUMapAsyncStatus_Force32)
END
ENUM(MipmapFilterMode)
	ENUM_ENTRY(Undefined, WGPUMipmapFilterMode_Undefined)
	ENUM_ENTRY(Nearest, WGPUMipmapFilterMode_Nearest)
	ENUM_ENTRY(Linear, WGPUMipmapFilterMode_Linear)
	ENUM_ENTRY(Force32, WGPUMipmapFilterMode_Force32)
END
ENUM(OptionalBool)
	ENUM_ENTRY(False, WGPUOptionalBool_False)
	ENUM_ENTRY(True, WGPUOptionalBool_True)
	ENUM_ENTRY(Undefined, WGPUOptionalBool_Undefined)
	ENUM_ENTRY(Force32, WGPUOptionalBool_Force32)
END
ENUM(PopErrorScopeStatus)
	ENUM_ENTRY(Success, WGPUPopErrorScopeStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUPopErrorScopeStatus_InstanceDropped)
	ENUM_ENTRY(Force32, WGPUPopErrorScopeStatus_Force32)
END
ENUM(PowerPreference)
	ENUM_ENTRY(Undefined, WGPUPowerPreference_Undefined)
	ENUM_ENTRY(LowPower, WGPUPowerPreference_LowPower)
	ENUM_ENTRY(HighPerformance, WGPUPowerPreference_HighPerformance)
	ENUM_ENTRY(Force32, WGPUPowerPreference_Force32)
END
ENUM(PresentMode)
	ENUM_ENTRY(Fifo, WGPUPresentMode_Fifo)
	ENUM_ENTRY(FifoRelaxed, WGPUPresentMode_FifoRelaxed)
	ENUM_ENTRY(Immediate, WGPUPresentMode_Immediate)
	ENUM_ENTRY(Mailbox, WGPUPresentMode_Mailbox)
	ENUM_ENTRY(Force32, WGPUPresentMode_Force32)
END
ENUM(PrimitiveTopology)
	ENUM_ENTRY(Undefined, WGPUPrimitiveTopology_Undefined)
	ENUM_ENTRY(PointList, WGPUPrimitiveTopology_PointList)
	ENUM_ENTRY(LineList, WGPUPrimitiveTopology_LineList)
	ENUM_ENTRY(LineStrip, WGPUPrimitiveTopology_LineStrip)
	ENUM_ENTRY(TriangleList, WGPUPrimitiveTopology_TriangleList)
	ENUM_ENTRY(TriangleStrip, WGPUPrimitiveTopology_TriangleStrip)
	ENUM_ENTRY(Force32, WGPUPrimitiveTopology_Force32)
END
ENUM(QueryType)
	ENUM_ENTRY(Occlusion, WGPUQueryType_Occlusion)
	ENUM_ENTRY(Timestamp, WGPUQueryType_Timestamp)
	ENUM_ENTRY(Force32, WGPUQueryType_Force32)
END
ENUM(QueueWorkDoneStatus)
	ENUM_ENTRY(Success, WGPUQueueWorkDoneStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPUQueueWorkDoneStatus_InstanceDropped)
	ENUM_ENTRY(Error, WGPUQueueWorkDoneStatus_Error)
	ENUM_ENTRY(Unknown, WGPUQueueWorkDoneStatus_Unknown)
	ENUM_ENTRY(DeviceLost, WGPUQueueWorkDoneStatus_DeviceLost)
	ENUM_ENTRY(Force32, WGPUQueueWorkDoneStatus_Force32)
END
ENUM(RequestAdapterStatus)
	ENUM_ENTRY(Success, WGPURequestAdapterStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPURequestAdapterStatus_InstanceDropped)
	ENUM_ENTRY(Unavailable, WGPURequestAdapterStatus_Unavailable)
	ENUM_ENTRY(Error, WGPURequestAdapterStatus_Error)
	ENUM_ENTRY(Unknown, WGPURequestAdapterStatus_Unknown)
	ENUM_ENTRY(Force32, WGPURequestAdapterStatus_Force32)
END
ENUM(RequestDeviceStatus)
	ENUM_ENTRY(Success, WGPURequestDeviceStatus_Success)
	ENUM_ENTRY(InstanceDropped, WGPURequestDeviceStatus_InstanceDropped)
	ENUM_ENTRY(Error, WGPURequestDeviceStatus_Error)
	ENUM_ENTRY(Unknown, WGPURequestDeviceStatus_Unknown)
	ENUM_ENTRY(Force32, WGPURequestDeviceStatus_Force32)
END
ENUM(SType)
	ENUM_ENTRY(ShaderSourceSPIRV, WGPUSType_ShaderSourceSPIRV)
	ENUM_ENTRY(ShaderSourceWGSL, WGPUSType_ShaderSourceWGSL)
	ENUM_ENTRY(RenderPassMaxDrawCount, WGPUSType_RenderPassMaxDrawCount)
	ENUM_ENTRY(SurfaceSourceMetalLayer, WGPUSType_SurfaceSourceMetalLayer)
	ENUM_ENTRY(SurfaceSourceWindowsHWND, WGPUSType_SurfaceSourceWindowsHWND)
	ENUM_ENTRY(SurfaceSourceXlibWindow, WGPUSType_SurfaceSourceXlibWindow)
	ENUM_ENTRY(SurfaceSourceWaylandSurface, WGPUSType_SurfaceSourceWaylandSurface)
	ENUM_ENTRY(SurfaceSourceAndroidNativeWindow, WGPUSType_SurfaceSourceAndroidNativeWindow)
	ENUM_ENTRY(SurfaceSourceXCBWindow, WGPUSType_SurfaceSourceXCBWindow)
	ENUM_ENTRY(TextureBindingViewDimensionDescriptor, WGPUSType_TextureBindingViewDimensionDescriptor)
	ENUM_ENTRY(Emscripten, WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten)
	ENUM_ENTRY(SurfaceDescriptorFromWindowsCoreWindow, WGPUSType_SurfaceDescriptorFromWindowsCoreWindow)
	ENUM_ENTRY(ExternalTextureBindingEntry, WGPUSType_ExternalTextureBindingEntry)
	ENUM_ENTRY(ExternalTextureBindingLayout, WGPUSType_ExternalTextureBindingLayout)
	ENUM_ENTRY(SurfaceDescriptorFromWindowsSwapChainPanel, WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel)
	ENUM_ENTRY(DawnTextureInternalUsageDescriptor, WGPUSType_DawnTextureInternalUsageDescriptor)
	ENUM_ENTRY(DawnEncoderInternalUsageDescriptor, WGPUSType_DawnEncoderInternalUsageDescriptor)
	ENUM_ENTRY(DawnInstanceDescriptor, WGPUSType_DawnInstanceDescriptor)
	ENUM_ENTRY(DawnCacheDeviceDescriptor, WGPUSType_DawnCacheDeviceDescriptor)
	ENUM_ENTRY(DawnAdapterPropertiesPowerPreference, WGPUSType_DawnAdapterPropertiesPowerPreference)
	ENUM_ENTRY(DawnBufferDescriptorErrorInfoFromWireClient, WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient)
	ENUM_ENTRY(DawnTogglesDescriptor, WGPUSType_DawnTogglesDescriptor)
	ENUM_ENTRY(DawnShaderModuleSPIRVOptionsDescriptor, WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor)
	ENUM_ENTRY(RequestAdapterOptionsLUID, WGPUSType_RequestAdapterOptionsLUID)
	ENUM_ENTRY(RequestAdapterOptionsGetGLProc, WGPUSType_RequestAdapterOptionsGetGLProc)
	ENUM_ENTRY(RequestAdapterOptionsD3D11Device, WGPUSType_RequestAdapterOptionsD3D11Device)
	ENUM_ENTRY(DawnRenderPassColorAttachmentRenderToSingleSampled, WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled)
	ENUM_ENTRY(RenderPassPixelLocalStorage, WGPUSType_RenderPassPixelLocalStorage)
	ENUM_ENTRY(PipelineLayoutPixelLocalStorage, WGPUSType_PipelineLayoutPixelLocalStorage)
	ENUM_ENTRY(BufferHostMappedPointer, WGPUSType_BufferHostMappedPointer)
	ENUM_ENTRY(DawnExperimentalSubgroupLimits, WGPUSType_DawnExperimentalSubgroupLimits)
	ENUM_ENTRY(AdapterPropertiesMemoryHeaps, WGPUSType_AdapterPropertiesMemoryHeaps)
	ENUM_ENTRY(AdapterPropertiesD3D, WGPUSType_AdapterPropertiesD3D)
	ENUM_ENTRY(AdapterPropertiesVk, WGPUSType_AdapterPropertiesVk)
	ENUM_ENTRY(DawnComputePipelineFullSubgroups, WGPUSType_DawnComputePipelineFullSubgroups)
	ENUM_ENTRY(DawnWireWGSLControl, WGPUSType_DawnWireWGSLControl)
	ENUM_ENTRY(DawnWGSLBlocklist, WGPUSType_DawnWGSLBlocklist)
	ENUM_ENTRY(DrmFormatCapabilities, WGPUSType_DrmFormatCapabilities)
	ENUM_ENTRY(ShaderModuleCompilationOptions, WGPUSType_ShaderModuleCompilationOptions)
	ENUM_ENTRY(ColorTargetStateExpandResolveTextureDawn, WGPUSType_ColorTargetStateExpandResolveTextureDawn)
	ENUM_ENTRY(RenderPassDescriptorExpandResolveRect, WGPUSType_RenderPassDescriptorExpandResolveRect)
	ENUM_ENTRY(SharedTextureMemoryVkDedicatedAllocationDescriptor, WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor)
	ENUM_ENTRY(SharedTextureMemoryAHardwareBufferDescriptor, WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor)
	ENUM_ENTRY(SharedTextureMemoryDmaBufDescriptor, WGPUSType_SharedTextureMemoryDmaBufDescriptor)
	ENUM_ENTRY(SharedTextureMemoryOpaqueFDDescriptor, WGPUSType_SharedTextureMemoryOpaqueFDDescriptor)
	ENUM_ENTRY(SharedTextureMemoryZirconHandleDescriptor, WGPUSType_SharedTextureMemoryZirconHandleDescriptor)
	ENUM_ENTRY(SharedTextureMemoryDXGISharedHandleDescriptor, WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor)
	ENUM_ENTRY(SharedTextureMemoryD3D11Texture2DDescriptor, WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor)
	ENUM_ENTRY(SharedTextureMemoryIOSurfaceDescriptor, WGPUSType_SharedTextureMemoryIOSurfaceDescriptor)
	ENUM_ENTRY(SharedTextureMemoryEGLImageDescriptor, WGPUSType_SharedTextureMemoryEGLImageDescriptor)
	ENUM_ENTRY(SharedTextureMemoryInitializedBeginState, WGPUSType_SharedTextureMemoryInitializedBeginState)
	ENUM_ENTRY(SharedTextureMemoryInitializedEndState, WGPUSType_SharedTextureMemoryInitializedEndState)
	ENUM_ENTRY(SharedTextureMemoryVkImageLayoutBeginState, WGPUSType_SharedTextureMemoryVkImageLayoutBeginState)
	ENUM_ENTRY(SharedTextureMemoryVkImageLayoutEndState, WGPUSType_SharedTextureMemoryVkImageLayoutEndState)
	ENUM_ENTRY(SharedTextureMemoryD3DSwapchainBeginState, WGPUSType_SharedTextureMemoryD3DSwapchainBeginState)
	ENUM_ENTRY(SharedFenceVkSemaphoreOpaqueFDDescriptor, WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor)
	ENUM_ENTRY(SharedFenceVkSemaphoreOpaqueFDExportInfo, WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo)
	ENUM_ENTRY(SharedFenceVkSemaphoreSyncFDDescriptor, WGPUSType_SharedFenceVkSemaphoreSyncFDDescriptor)
	ENUM_ENTRY(SharedFenceVkSemaphoreSyncFDExportInfo, WGPUSType_SharedFenceVkSemaphoreSyncFDExportInfo)
	ENUM_ENTRY(SharedFenceVkSemaphoreZirconHandleDescriptor, WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor)
	ENUM_ENTRY(SharedFenceVkSemaphoreZirconHandleExportInfo, WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo)
	ENUM_ENTRY(SharedFenceDXGISharedHandleDescriptor, WGPUSType_SharedFenceDXGISharedHandleDescriptor)
	ENUM_ENTRY(SharedFenceDXGISharedHandleExportInfo, WGPUSType_SharedFenceDXGISharedHandleExportInfo)
	ENUM_ENTRY(SharedFenceMTLSharedEventDescriptor, WGPUSType_SharedFenceMTLSharedEventDescriptor)
	ENUM_ENTRY(SharedFenceMTLSharedEventExportInfo, WGPUSType_SharedFenceMTLSharedEventExportInfo)
	ENUM_ENTRY(SharedBufferMemoryD3D12ResourceDescriptor, WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor)
	ENUM_ENTRY(StaticSamplerBindingLayout, WGPUSType_StaticSamplerBindingLayout)
	ENUM_ENTRY(YCbCrVkDescriptor, WGPUSType_YCbCrVkDescriptor)
	ENUM_ENTRY(SharedTextureMemoryAHardwareBufferProperties, WGPUSType_SharedTextureMemoryAHardwareBufferProperties)
	ENUM_ENTRY(AHardwareBufferProperties, WGPUSType_AHardwareBufferProperties)
	ENUM_ENTRY(Force32, WGPUSType_Force32)
END
ENUM(SamplerBindingType)
	ENUM_ENTRY(Undefined, WGPUSamplerBindingType_Undefined)
	ENUM_ENTRY(Filtering, WGPUSamplerBindingType_Filtering)
	ENUM_ENTRY(NonFiltering, WGPUSamplerBindingType_NonFiltering)
	ENUM_ENTRY(Comparison, WGPUSamplerBindingType_Comparison)
	ENUM_ENTRY(Force32, WGPUSamplerBindingType_Force32)
END
ENUM(SharedFenceType)
	ENUM_ENTRY(VkSemaphoreOpaqueFD, WGPUSharedFenceType_VkSemaphoreOpaqueFD)
	ENUM_ENTRY(VkSemaphoreSyncFD, WGPUSharedFenceType_VkSemaphoreSyncFD)
	ENUM_ENTRY(VkSemaphoreZirconHandle, WGPUSharedFenceType_VkSemaphoreZirconHandle)
	ENUM_ENTRY(DXGISharedHandle, WGPUSharedFenceType_DXGISharedHandle)
	ENUM_ENTRY(MTLSharedEvent, WGPUSharedFenceType_MTLSharedEvent)
	ENUM_ENTRY(Force32, WGPUSharedFenceType_Force32)
END
ENUM(Status)
	ENUM_ENTRY(Success, WGPUStatus_Success)
	ENUM_ENTRY(Error, WGPUStatus_Error)
	ENUM_ENTRY(Force32, WGPUStatus_Force32)
END
ENUM(StencilOperation)
	ENUM_ENTRY(Undefined, WGPUStencilOperation_Undefined)
	ENUM_ENTRY(Keep, WGPUStencilOperation_Keep)
	ENUM_ENTRY(Zero, WGPUStencilOperation_Zero)
	ENUM_ENTRY(Replace, WGPUStencilOperation_Replace)
	ENUM_ENTRY(Invert, WGPUStencilOperation_Invert)
	ENUM_ENTRY(IncrementClamp, WGPUStencilOperation_IncrementClamp)
	ENUM_ENTRY(DecrementClamp, WGPUStencilOperation_DecrementClamp)
	ENUM_ENTRY(IncrementWrap, WGPUStencilOperation_IncrementWrap)
	ENUM_ENTRY(DecrementWrap, WGPUStencilOperation_DecrementWrap)
	ENUM_ENTRY(Force32, WGPUStencilOperation_Force32)
END
ENUM(StorageTextureAccess)
	ENUM_ENTRY(Undefined, WGPUStorageTextureAccess_Undefined)
	ENUM_ENTRY(WriteOnly, WGPUStorageTextureAccess_WriteOnly)
	ENUM_ENTRY(ReadOnly, WGPUStorageTextureAccess_ReadOnly)
	ENUM_ENTRY(ReadWrite, WGPUStorageTextureAccess_ReadWrite)
	ENUM_ENTRY(Force32, WGPUStorageTextureAccess_Force32)
END
ENUM(StoreOp)
	ENUM_ENTRY(Undefined, WGPUStoreOp_Undefined)
	ENUM_ENTRY(Store, WGPUStoreOp_Store)
	ENUM_ENTRY(Discard, WGPUStoreOp_Discard)
	ENUM_ENTRY(Force32, WGPUStoreOp_Force32)
END
ENUM(SurfaceGetCurrentTextureStatus)
	ENUM_ENTRY(Success, WGPUSurfaceGetCurrentTextureStatus_Success)
	ENUM_ENTRY(Timeout, WGPUSurfaceGetCurrentTextureStatus_Timeout)
	ENUM_ENTRY(Outdated, WGPUSurfaceGetCurrentTextureStatus_Outdated)
	ENUM_ENTRY(Lost, WGPUSurfaceGetCurrentTextureStatus_Lost)
	ENUM_ENTRY(OutOfMemory, WGPUSurfaceGetCurrentTextureStatus_OutOfMemory)
	ENUM_ENTRY(DeviceLost, WGPUSurfaceGetCurrentTextureStatus_DeviceLost)
	ENUM_ENTRY(Error, WGPUSurfaceGetCurrentTextureStatus_Error)
	ENUM_ENTRY(Force32, WGPUSurfaceGetCurrentTextureStatus_Force32)
END
ENUM(TextureAspect)
	ENUM_ENTRY(Undefined, WGPUTextureAspect_Undefined)
	ENUM_ENTRY(All, WGPUTextureAspect_All)
	ENUM_ENTRY(StencilOnly, WGPUTextureAspect_StencilOnly)
	ENUM_ENTRY(DepthOnly, WGPUTextureAspect_DepthOnly)
	ENUM_ENTRY(Plane0Only, WGPUTextureAspect_Plane0Only)
	ENUM_ENTRY(Plane1Only, WGPUTextureAspect_Plane1Only)
	ENUM_ENTRY(Plane2Only, WGPUTextureAspect_Plane2Only)
	ENUM_ENTRY(Force32, WGPUTextureAspect_Force32)
END
ENUM(TextureDimension)
	ENUM_ENTRY(Undefined, WGPUTextureDimension_Undefined)
	ENUM_ENTRY(_1D, WGPUTextureDimension_1D)
	ENUM_ENTRY(_2D, WGPUTextureDimension_2D)
	ENUM_ENTRY(_3D, WGPUTextureDimension_3D)
	ENUM_ENTRY(Force32, WGPUTextureDimension_Force32)
END
ENUM(TextureFormat)
	ENUM_ENTRY(Undefined, WGPUTextureFormat_Undefined)
	ENUM_ENTRY(R8Unorm, WGPUTextureFormat_R8Unorm)
	ENUM_ENTRY(R8Snorm, WGPUTextureFormat_R8Snorm)
	ENUM_ENTRY(R8Uint, WGPUTextureFormat_R8Uint)
	ENUM_ENTRY(R8Sint, WGPUTextureFormat_R8Sint)
	ENUM_ENTRY(R16Uint, WGPUTextureFormat_R16Uint)
	ENUM_ENTRY(R16Sint, WGPUTextureFormat_R16Sint)
	ENUM_ENTRY(R16Float, WGPUTextureFormat_R16Float)
	ENUM_ENTRY(RG8Unorm, WGPUTextureFormat_RG8Unorm)
	ENUM_ENTRY(RG8Snorm, WGPUTextureFormat_RG8Snorm)
	ENUM_ENTRY(RG8Uint, WGPUTextureFormat_RG8Uint)
	ENUM_ENTRY(RG8Sint, WGPUTextureFormat_RG8Sint)
	ENUM_ENTRY(R32Float, WGPUTextureFormat_R32Float)
	ENUM_ENTRY(R32Uint, WGPUTextureFormat_R32Uint)
	ENUM_ENTRY(R32Sint, WGPUTextureFormat_R32Sint)
	ENUM_ENTRY(RG16Uint, WGPUTextureFormat_RG16Uint)
	ENUM_ENTRY(RG16Sint, WGPUTextureFormat_RG16Sint)
	ENUM_ENTRY(RG16Float, WGPUTextureFormat_RG16Float)
	ENUM_ENTRY(RGBA8Unorm, WGPUTextureFormat_RGBA8Unorm)
	ENUM_ENTRY(RGBA8UnormSrgb, WGPUTextureFormat_RGBA8UnormSrgb)
	ENUM_ENTRY(RGBA8Snorm, WGPUTextureFormat_RGBA8Snorm)
	ENUM_ENTRY(RGBA8Uint, WGPUTextureFormat_RGBA8Uint)
	ENUM_ENTRY(RGBA8Sint, WGPUTextureFormat_RGBA8Sint)
	ENUM_ENTRY(BGRA8Unorm, WGPUTextureFormat_BGRA8Unorm)
	ENUM_ENTRY(BGRA8UnormSrgb, WGPUTextureFormat_BGRA8UnormSrgb)
	ENUM_ENTRY(RGB10A2Uint, WGPUTextureFormat_RGB10A2Uint)
	ENUM_ENTRY(RGB10A2Unorm, WGPUTextureFormat_RGB10A2Unorm)
	ENUM_ENTRY(RG11B10Ufloat, WGPUTextureFormat_RG11B10Ufloat)
	ENUM_ENTRY(RGB9E5Ufloat, WGPUTextureFormat_RGB9E5Ufloat)
	ENUM_ENTRY(RG32Float, WGPUTextureFormat_RG32Float)
	ENUM_ENTRY(RG32Uint, WGPUTextureFormat_RG32Uint)
	ENUM_ENTRY(RG32Sint, WGPUTextureFormat_RG32Sint)
	ENUM_ENTRY(RGBA16Uint, WGPUTextureFormat_RGBA16Uint)
	ENUM_ENTRY(RGBA16Sint, WGPUTextureFormat_RGBA16Sint)
	ENUM_ENTRY(RGBA16Float, WGPUTextureFormat_RGBA16Float)
	ENUM_ENTRY(RGBA32Float, WGPUTextureFormat_RGBA32Float)
	ENUM_ENTRY(RGBA32Uint, WGPUTextureFormat_RGBA32Uint)
	ENUM_ENTRY(RGBA32Sint, WGPUTextureFormat_RGBA32Sint)
	ENUM_ENTRY(Stencil8, WGPUTextureFormat_Stencil8)
	ENUM_ENTRY(Depth16Unorm, WGPUTextureFormat_Depth16Unorm)
	ENUM_ENTRY(Depth24Plus, WGPUTextureFormat_Depth24Plus)
	ENUM_ENTRY(Depth24PlusStencil8, WGPUTextureFormat_Depth24PlusStencil8)
	ENUM_ENTRY(Depth32Float, WGPUTextureFormat_Depth32Float)
	ENUM_ENTRY(Depth32FloatStencil8, WGPUTextureFormat_Depth32FloatStencil8)
	ENUM_ENTRY(BC1RGBAUnorm, WGPUTextureFormat_BC1RGBAUnorm)
	ENUM_ENTRY(BC1RGBAUnormSrgb, WGPUTextureFormat_BC1RGBAUnormSrgb)
	ENUM_ENTRY(BC2RGBAUnorm, WGPUTextureFormat_BC2RGBAUnorm)
	ENUM_ENTRY(BC2RGBAUnormSrgb, WGPUTextureFormat_BC2RGBAUnormSrgb)
	ENUM_ENTRY(BC3RGBAUnorm, WGPUTextureFormat_BC3RGBAUnorm)
	ENUM_ENTRY(BC3RGBAUnormSrgb, WGPUTextureFormat_BC3RGBAUnormSrgb)
	ENUM_ENTRY(BC4RUnorm, WGPUTextureFormat_BC4RUnorm)
	ENUM_ENTRY(BC4RSnorm, WGPUTextureFormat_BC4RSnorm)
	ENUM_ENTRY(BC5RGUnorm, WGPUTextureFormat_BC5RGUnorm)
	ENUM_ENTRY(BC5RGSnorm, WGPUTextureFormat_BC5RGSnorm)
	ENUM_ENTRY(BC6HRGBUfloat, WGPUTextureFormat_BC6HRGBUfloat)
	ENUM_ENTRY(BC6HRGBFloat, WGPUTextureFormat_BC6HRGBFloat)
	ENUM_ENTRY(BC7RGBAUnorm, WGPUTextureFormat_BC7RGBAUnorm)
	ENUM_ENTRY(BC7RGBAUnormSrgb, WGPUTextureFormat_BC7RGBAUnormSrgb)
	ENUM_ENTRY(ETC2RGB8Unorm, WGPUTextureFormat_ETC2RGB8Unorm)
	ENUM_ENTRY(ETC2RGB8UnormSrgb, WGPUTextureFormat_ETC2RGB8UnormSrgb)
	ENUM_ENTRY(ETC2RGB8A1Unorm, WGPUTextureFormat_ETC2RGB8A1Unorm)
	ENUM_ENTRY(ETC2RGB8A1UnormSrgb, WGPUTextureFormat_ETC2RGB8A1UnormSrgb)
	ENUM_ENTRY(ETC2RGBA8Unorm, WGPUTextureFormat_ETC2RGBA8Unorm)
	ENUM_ENTRY(ETC2RGBA8UnormSrgb, WGPUTextureFormat_ETC2RGBA8UnormSrgb)
	ENUM_ENTRY(EACR11Unorm, WGPUTextureFormat_EACR11Unorm)
	ENUM_ENTRY(EACR11Snorm, WGPUTextureFormat_EACR11Snorm)
	ENUM_ENTRY(EACRG11Unorm, WGPUTextureFormat_EACRG11Unorm)
	ENUM_ENTRY(EACRG11Snorm, WGPUTextureFormat_EACRG11Snorm)
	ENUM_ENTRY(ASTC4x4Unorm, WGPUTextureFormat_ASTC4x4Unorm)
	ENUM_ENTRY(ASTC4x4UnormSrgb, WGPUTextureFormat_ASTC4x4UnormSrgb)
	ENUM_ENTRY(ASTC5x4Unorm, WGPUTextureFormat_ASTC5x4Unorm)
	ENUM_ENTRY(ASTC5x4UnormSrgb, WGPUTextureFormat_ASTC5x4UnormSrgb)
	ENUM_ENTRY(ASTC5x5Unorm, WGPUTextureFormat_ASTC5x5Unorm)
	ENUM_ENTRY(ASTC5x5UnormSrgb, WGPUTextureFormat_ASTC5x5UnormSrgb)
	ENUM_ENTRY(ASTC6x5Unorm, WGPUTextureFormat_ASTC6x5Unorm)
	ENUM_ENTRY(ASTC6x5UnormSrgb, WGPUTextureFormat_ASTC6x5UnormSrgb)
	ENUM_ENTRY(ASTC6x6Unorm, WGPUTextureFormat_ASTC6x6Unorm)
	ENUM_ENTRY(ASTC6x6UnormSrgb, WGPUTextureFormat_ASTC6x6UnormSrgb)
	ENUM_ENTRY(ASTC8x5Unorm, WGPUTextureFormat_ASTC8x5Unorm)
	ENUM_ENTRY(ASTC8x5UnormSrgb, WGPUTextureFormat_ASTC8x5UnormSrgb)
	ENUM_ENTRY(ASTC8x6Unorm, WGPUTextureFormat_ASTC8x6Unorm)
	ENUM_ENTRY(ASTC8x6UnormSrgb, WGPUTextureFormat_ASTC8x6UnormSrgb)
	ENUM_ENTRY(ASTC8x8Unorm, WGPUTextureFormat_ASTC8x8Unorm)
	ENUM_ENTRY(ASTC8x8UnormSrgb, WGPUTextureFormat_ASTC8x8UnormSrgb)
	ENUM_ENTRY(ASTC10x5Unorm, WGPUTextureFormat_ASTC10x5Unorm)
	ENUM_ENTRY(ASTC10x5UnormSrgb, WGPUTextureFormat_ASTC10x5UnormSrgb)
	ENUM_ENTRY(ASTC10x6Unorm, WGPUTextureFormat_ASTC10x6Unorm)
	ENUM_ENTRY(ASTC10x6UnormSrgb, WGPUTextureFormat_ASTC10x6UnormSrgb)
	ENUM_ENTRY(ASTC10x8Unorm, WGPUTextureFormat_ASTC10x8Unorm)
	ENUM_ENTRY(ASTC10x8UnormSrgb, WGPUTextureFormat_ASTC10x8UnormSrgb)
	ENUM_ENTRY(ASTC10x10Unorm, WGPUTextureFormat_ASTC10x10Unorm)
	ENUM_ENTRY(ASTC10x10UnormSrgb, WGPUTextureFormat_ASTC10x10UnormSrgb)
	ENUM_ENTRY(ASTC12x10Unorm, WGPUTextureFormat_ASTC12x10Unorm)
	ENUM_ENTRY(ASTC12x10UnormSrgb, WGPUTextureFormat_ASTC12x10UnormSrgb)
	ENUM_ENTRY(ASTC12x12Unorm, WGPUTextureFormat_ASTC12x12Unorm)
	ENUM_ENTRY(ASTC12x12UnormSrgb, WGPUTextureFormat_ASTC12x12UnormSrgb)
	ENUM_ENTRY(R16Unorm, WGPUTextureFormat_R16Unorm)
	ENUM_ENTRY(RG16Unorm, WGPUTextureFormat_RG16Unorm)
	ENUM_ENTRY(RGBA16Unorm, WGPUTextureFormat_RGBA16Unorm)
	ENUM_ENTRY(R16Snorm, WGPUTextureFormat_R16Snorm)
	ENUM_ENTRY(RG16Snorm, WGPUTextureFormat_RG16Snorm)
	ENUM_ENTRY(RGBA16Snorm, WGPUTextureFormat_RGBA16Snorm)
	ENUM_ENTRY(R8BG8Biplanar420Unorm, WGPUTextureFormat_R8BG8Biplanar420Unorm)
	ENUM_ENTRY(R10X6BG10X6Biplanar420Unorm, WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm)
	ENUM_ENTRY(R8BG8A8Triplanar420Unorm, WGPUTextureFormat_R8BG8A8Triplanar420Unorm)
	ENUM_ENTRY(R8BG8Biplanar422Unorm, WGPUTextureFormat_R8BG8Biplanar422Unorm)
	ENUM_ENTRY(R8BG8Biplanar444Unorm, WGPUTextureFormat_R8BG8Biplanar444Unorm)
	ENUM_ENTRY(R10X6BG10X6Biplanar422Unorm, WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm)
	ENUM_ENTRY(R10X6BG10X6Biplanar444Unorm, WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm)
	ENUM_ENTRY(External, WGPUTextureFormat_External)
	ENUM_ENTRY(Force32, WGPUTextureFormat_Force32)
END
ENUM(TextureSampleType)
	ENUM_ENTRY(Undefined, WGPUTextureSampleType_Undefined)
	ENUM_ENTRY(Float, WGPUTextureSampleType_Float)
	ENUM_ENTRY(UnfilterableFloat, WGPUTextureSampleType_UnfilterableFloat)
	ENUM_ENTRY(Depth, WGPUTextureSampleType_Depth)
	ENUM_ENTRY(Sint, WGPUTextureSampleType_Sint)
	ENUM_ENTRY(Uint, WGPUTextureSampleType_Uint)
	ENUM_ENTRY(Force32, WGPUTextureSampleType_Force32)
END
ENUM(TextureViewDimension)
	ENUM_ENTRY(Undefined, WGPUTextureViewDimension_Undefined)
	ENUM_ENTRY(_1D, WGPUTextureViewDimension_1D)
	ENUM_ENTRY(_2D, WGPUTextureViewDimension_2D)
	ENUM_ENTRY(_2DArray, WGPUTextureViewDimension_2DArray)
	ENUM_ENTRY(Cube, WGPUTextureViewDimension_Cube)
	ENUM_ENTRY(CubeArray, WGPUTextureViewDimension_CubeArray)
	ENUM_ENTRY(_3D, WGPUTextureViewDimension_3D)
	ENUM_ENTRY(Force32, WGPUTextureViewDimension_Force32)
END
ENUM(VertexFormat)
	ENUM_ENTRY(Uint8x2, WGPUVertexFormat_Uint8x2)
	ENUM_ENTRY(Uint8x4, WGPUVertexFormat_Uint8x4)
	ENUM_ENTRY(Sint8x2, WGPUVertexFormat_Sint8x2)
	ENUM_ENTRY(Sint8x4, WGPUVertexFormat_Sint8x4)
	ENUM_ENTRY(Unorm8x2, WGPUVertexFormat_Unorm8x2)
	ENUM_ENTRY(Unorm8x4, WGPUVertexFormat_Unorm8x4)
	ENUM_ENTRY(Snorm8x2, WGPUVertexFormat_Snorm8x2)
	ENUM_ENTRY(Snorm8x4, WGPUVertexFormat_Snorm8x4)
	ENUM_ENTRY(Uint16x2, WGPUVertexFormat_Uint16x2)
	ENUM_ENTRY(Uint16x4, WGPUVertexFormat_Uint16x4)
	ENUM_ENTRY(Sint16x2, WGPUVertexFormat_Sint16x2)
	ENUM_ENTRY(Sint16x4, WGPUVertexFormat_Sint16x4)
	ENUM_ENTRY(Unorm16x2, WGPUVertexFormat_Unorm16x2)
	ENUM_ENTRY(Unorm16x4, WGPUVertexFormat_Unorm16x4)
	ENUM_ENTRY(Snorm16x2, WGPUVertexFormat_Snorm16x2)
	ENUM_ENTRY(Snorm16x4, WGPUVertexFormat_Snorm16x4)
	ENUM_ENTRY(Float16x2, WGPUVertexFormat_Float16x2)
	ENUM_ENTRY(Float16x4, WGPUVertexFormat_Float16x4)
	ENUM_ENTRY(Float32, WGPUVertexFormat_Float32)
	ENUM_ENTRY(Float32x2, WGPUVertexFormat_Float32x2)
	ENUM_ENTRY(Float32x3, WGPUVertexFormat_Float32x3)
	ENUM_ENTRY(Float32x4, WGPUVertexFormat_Float32x4)
	ENUM_ENTRY(Uint32, WGPUVertexFormat_Uint32)
	ENUM_ENTRY(Uint32x2, WGPUVertexFormat_Uint32x2)
	ENUM_ENTRY(Uint32x3, WGPUVertexFormat_Uint32x3)
	ENUM_ENTRY(Uint32x4, WGPUVertexFormat_Uint32x4)
	ENUM_ENTRY(Sint32, WGPUVertexFormat_Sint32)
	ENUM_ENTRY(Sint32x2, WGPUVertexFormat_Sint32x2)
	ENUM_ENTRY(Sint32x3, WGPUVertexFormat_Sint32x3)
	ENUM_ENTRY(Sint32x4, WGPUVertexFormat_Sint32x4)
	ENUM_ENTRY(_2, WGPUVertexFormat_Unorm10_10_10_2)
	ENUM_ENTRY(Force32, WGPUVertexFormat_Force32)
END
ENUM(VertexStepMode)
	ENUM_ENTRY(Undefined, WGPUVertexStepMode_Undefined)
	ENUM_ENTRY(VertexBufferNotUsed, WGPUVertexStepMode_VertexBufferNotUsed)
	ENUM_ENTRY(Vertex, WGPUVertexStepMode_Vertex)
	ENUM_ENTRY(Instance, WGPUVertexStepMode_Instance)
	ENUM_ENTRY(Force32, WGPUVertexStepMode_Force32)
END
ENUM(WaitStatus)
	ENUM_ENTRY(Success, WGPUWaitStatus_Success)
	ENUM_ENTRY(TimedOut, WGPUWaitStatus_TimedOut)
	ENUM_ENTRY(UnsupportedTimeout, WGPUWaitStatus_UnsupportedTimeout)
	ENUM_ENTRY(UnsupportedCount, WGPUWaitStatus_UnsupportedCount)
	ENUM_ENTRY(UnsupportedMixedSources, WGPUWaitStatus_UnsupportedMixedSources)
	ENUM_ENTRY(Unknown, WGPUWaitStatus_Unknown)
	ENUM_ENTRY(Force32, WGPUWaitStatus_Force32)
END
ENUM(BufferUsage)
	ENUM_ENTRY(None, 0x0000000000000000)
	ENUM_ENTRY(MapRead, 0x0000000000000001)
	ENUM_ENTRY(MapWrite, 0x0000000000000002)
	ENUM_ENTRY(CopySrc, 0x0000000000000004)
	ENUM_ENTRY(CopyDst, 0x0000000000000008)
	ENUM_ENTRY(Index, 0x0000000000000010)
	ENUM_ENTRY(Vertex, 0x0000000000000020)
	ENUM_ENTRY(Uniform, 0x0000000000000040)
	ENUM_ENTRY(Storage, 0x0000000000000080)
	ENUM_ENTRY(Indirect, 0x0000000000000100)
	ENUM_ENTRY(QueryResolve, 0x0000000000000200)
END
ENUM(ColorWriteMask)
	ENUM_ENTRY(None, 0x0000000000000000)
	ENUM_ENTRY(Red, 0x0000000000000001)
	ENUM_ENTRY(Green, 0x0000000000000002)
	ENUM_ENTRY(Blue, 0x0000000000000004)
	ENUM_ENTRY(Alpha, 0x0000000000000008)
	ENUM_ENTRY(All, 0x000000000000000F)
END
ENUM(HeapProperty)
	ENUM_ENTRY(DeviceLocal, 0x0000000000000001)
	ENUM_ENTRY(HostVisible, 0x0000000000000002)
	ENUM_ENTRY(HostCoherent, 0x0000000000000004)
	ENUM_ENTRY(HostUncached, 0x0000000000000008)
	ENUM_ENTRY(HostCached, 0x0000000000000010)
END
ENUM(MapMode)
	ENUM_ENTRY(None, 0x0000000000000000)
	ENUM_ENTRY(Read, 0x0000000000000001)
	ENUM_ENTRY(Write, 0x0000000000000002)
END
ENUM(ShaderStage)
	ENUM_ENTRY(None, 0x0000000000000000)
	ENUM_ENTRY(Vertex, 0x0000000000000001)
	ENUM_ENTRY(Fragment, 0x0000000000000002)
	ENUM_ENTRY(Compute, 0x0000000000000004)
END
ENUM(TextureUsage)
	ENUM_ENTRY(None, 0x0000000000000000)
	ENUM_ENTRY(CopySrc, 0x0000000000000001)
	ENUM_ENTRY(CopyDst, 0x0000000000000002)
	ENUM_ENTRY(TextureBinding, 0x0000000000000004)
	ENUM_ENTRY(StorageBinding, 0x0000000000000008)
	ENUM_ENTRY(RenderAttachment, 0x0000000000000010)
	ENUM_ENTRY(TransientAttachment, 0x0000000000000020)
	ENUM_ENTRY(StorageAttachment, 0x0000000000000040)
END

// Structs
STRUCT(ChainedStruct)
	void setDefault();
END

STRUCT(ChainedStructOut)
	void setDefault();
END

STRUCT(INTERNAL__HAVE_EMDAWNWEBGPU_HEADER)
	void setDefault();
END

STRUCT(AdapterPropertiesD3D)
	void setDefault();
END

STRUCT(AdapterPropertiesVk)
	void setDefault();
END

STRUCT(BlendComponent)
	void setDefault();
END

STRUCT(BufferHostMappedPointer)
	void setDefault();
END

STRUCT(Color)
	void setDefault();
	Color(double r, double g, double b, double a) : WGPUColor{ r, g, b, a } {}
END

STRUCT(ColorTargetStateExpandResolveTextureDawn)
	void setDefault();
END

STRUCT(ComputePassTimestampWrites)
	void setDefault();
END

STRUCT(DawnWGSLBlocklist)
	void setDefault();
END

STRUCT(DawnAdapterPropertiesPowerPreference)
	void setDefault();
END

STRUCT(DawnBufferDescriptorErrorInfoFromWireClient)
	void setDefault();
END

STRUCT(DawnCacheDeviceDescriptor)
	void setDefault();
END

STRUCT(DawnComputePipelineFullSubgroups)
	void setDefault();
END

STRUCT(DawnEncoderInternalUsageDescriptor)
	void setDefault();
END

STRUCT(DawnExperimentalSubgroupLimits)
	void setDefault();
END

STRUCT(DawnRenderPassColorAttachmentRenderToSingleSampled)
	void setDefault();
END

STRUCT(DawnShaderModuleSPIRVOptionsDescriptor)
	void setDefault();
END

STRUCT(DawnTextureInternalUsageDescriptor)
	void setDefault();
END

STRUCT(DawnTogglesDescriptor)
	void setDefault();
END

STRUCT(DawnWireWGSLControl)
	void setDefault();
END

STRUCT(DrmFormatProperties)
	void setDefault();
END

STRUCT(Extent2D)
	void setDefault();
END

STRUCT(Extent3D)
	void setDefault();
	Extent3D(uint32_t width, uint32_t height, uint32_t depthOrArrayLayers) : WGPUExtent3D{ width, height, depthOrArrayLayers } {}
END

STRUCT(ExternalTextureBindingEntry)
	void setDefault();
END

STRUCT(ExternalTextureBindingLayout)
	void setDefault();
END

STRUCT(Future)
	void setDefault();
END

STRUCT(Limits)
	void setDefault();
END

STRUCT(MemoryHeapInfo)
	void setDefault();
END

STRUCT(Origin2D)
	void setDefault();
END

STRUCT(Origin3D)
	void setDefault();
	Origin3D(uint32_t x, uint32_t y, uint32_t z) : WGPUOrigin3D{ x, y, z } {}
END

STRUCT(RenderPassDepthStencilAttachment)
	void setDefault();
END

STRUCT(RenderPassDescriptorExpandResolveRect)
	void setDefault();
END

STRUCT(RenderPassMaxDrawCount)
	void setDefault();
END

STRUCT(RenderPassTimestampWrites)
	void setDefault();
END

STRUCT(ShaderModuleCompilationOptions)
	void setDefault();
END

STRUCT(ShaderSourceSPIRV)
	void setDefault();
END

STRUCT(SharedFenceDXGISharedHandleDescriptor)
	void setDefault();
END

STRUCT(SharedFenceDXGISharedHandleExportInfo)
	void setDefault();
END

STRUCT(SharedFenceMTLSharedEventDescriptor)
	void setDefault();
END

STRUCT(SharedFenceMTLSharedEventExportInfo)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreOpaqueFDDescriptor)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreOpaqueFDExportInfo)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreSyncFDDescriptor)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreSyncFDExportInfo)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreZirconHandleDescriptor)
	void setDefault();
END

STRUCT(SharedFenceVkSemaphoreZirconHandleExportInfo)
	void setDefault();
END

STRUCT(SharedTextureMemoryD3DSwapchainBeginState)
	void setDefault();
END

STRUCT(SharedTextureMemoryDXGISharedHandleDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryEGLImageDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryIOSurfaceDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryAHardwareBufferDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryDmaBufPlane)
	void setDefault();
END

STRUCT(SharedTextureMemoryOpaqueFDDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryVkDedicatedAllocationDescriptor)
	void setDefault();
END

STRUCT(SharedTextureMemoryVkImageLayoutBeginState)
	void setDefault();
END

STRUCT(SharedTextureMemoryVkImageLayoutEndState)
	void setDefault();
END

STRUCT(SharedTextureMemoryZirconHandleDescriptor)
	void setDefault();
END

STRUCT(StaticSamplerBindingLayout)
	void setDefault();
END

STRUCT(StencilFaceState)
	void setDefault();
END

STRUCT(StringView)
	void setDefault();
END

STRUCT(SurfaceDescriptorFromWindowsCoreWindow)
	void setDefault();
END

STRUCT(SurfaceDescriptorFromWindowsSwapChainPanel)
	void setDefault();
END

STRUCT(SurfaceSourceXCBWindow)
	void setDefault();
END

STRUCT(SurfaceSourceAndroidNativeWindow)
	void setDefault();
END

STRUCT(SurfaceSourceCanvasHTMLSelector_Emscripten)
	void setDefault();
END

STRUCT(SurfaceSourceMetalLayer)
	void setDefault();
END

STRUCT(SurfaceSourceWaylandSurface)
	void setDefault();
END

STRUCT(SurfaceSourceWindowsHWND)
	void setDefault();
END

STRUCT(SurfaceSourceXlibWindow)
	void setDefault();
END

STRUCT(SurfaceTexture)
	void setDefault();
END

STRUCT(TextureBindingViewDimensionDescriptor)
	void setDefault();
END

STRUCT(VertexAttribute)
	void setDefault();
END

STRUCT(YCbCrVkDescriptor)
	void setDefault();
END

STRUCT(AHardwareBufferProperties)
	void setDefault();
END

STRUCT(AdapterPropertiesMemoryHeaps)
	void setDefault();
	void freeMembers();
END

STRUCT(BlendState)
	void setDefault();
END

STRUCT(DrmFormatCapabilities)
	void setDefault();
	void freeMembers();
END

STRUCT(FutureWaitInfo)
	void setDefault();
END

STRUCT(ImageCopyBuffer)
	void setDefault();
END

STRUCT(ImageCopyTexture)
	void setDefault();
END

STRUCT(PipelineLayoutPixelLocalStorage)
	void setDefault();
END

STRUCT(ShaderSourceWGSL)
	void setDefault();
END

STRUCT(SharedTextureMemoryAHardwareBufferProperties)
	void setDefault();
END

STRUCT(SharedTextureMemoryDmaBufDescriptor)
	void setDefault();
END

STRUCT(VertexBufferLayout)
	void setDefault();
END

STRUCT(RenderPassPixelLocalStorage)
	void setDefault();
END


// Descriptors
DESCRIPTOR(BufferMapCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(CompilationInfoCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(CreateComputePipelineAsyncCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(CreateRenderPipelineAsyncCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(DeviceLostCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(PopErrorScopeCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(QueueWorkDoneCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(RequestAdapterCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(RequestDeviceCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(UncapturedErrorCallbackInfo2)
	void setDefault();
END

DESCRIPTOR(AdapterInfo)
	void setDefault();
	void freeMembers();
END

DESCRIPTOR(BindGroupEntry)
	void setDefault();
END

DESCRIPTOR(BufferBindingLayout)
	void setDefault();
END

DESCRIPTOR(BufferDescriptor)
	void setDefault();
END

DESCRIPTOR(BufferMapCallbackInfo)
	void setDefault();
END

DESCRIPTOR(CommandBufferDescriptor)
	void setDefault();
END

DESCRIPTOR(CommandEncoderDescriptor)
	void setDefault();
END

DESCRIPTOR(CompilationInfoCallbackInfo)
	void setDefault();
END

DESCRIPTOR(CompilationMessage)
	void setDefault();
END

DESCRIPTOR(ConstantEntry)
	void setDefault();
END

DESCRIPTOR(CopyTextureForBrowserOptions)
	void setDefault();
END

DESCRIPTOR(CreateComputePipelineAsyncCallbackInfo)
	void setDefault();
END

DESCRIPTOR(CreateRenderPipelineAsyncCallbackInfo)
	void setDefault();
END

DESCRIPTOR(DeviceLostCallbackInfo)
	void setDefault();
END

DESCRIPTOR(FormatCapabilities)
	void setDefault();
END

DESCRIPTOR(InstanceFeatures)
	void setDefault();
END

DESCRIPTOR(MultisampleState)
	void setDefault();
END

DESCRIPTOR(PipelineLayoutDescriptor)
	void setDefault();
END

DESCRIPTOR(PipelineLayoutStorageAttachment)
	void setDefault();
END

DESCRIPTOR(PopErrorScopeCallbackInfo)
	void setDefault();
END

DESCRIPTOR(PrimitiveState)
	void setDefault();
END

DESCRIPTOR(QuerySetDescriptor)
	void setDefault();
END

DESCRIPTOR(QueueDescriptor)
	void setDefault();
END

DESCRIPTOR(QueueWorkDoneCallbackInfo)
	void setDefault();
END

DESCRIPTOR(RenderBundleDescriptor)
	void setDefault();
END

DESCRIPTOR(RenderBundleEncoderDescriptor)
	void setDefault();
END

DESCRIPTOR(RequestAdapterCallbackInfo)
	void setDefault();
END

DESCRIPTOR(RequestAdapterOptions)
	void setDefault();
END

DESCRIPTOR(RequestDeviceCallbackInfo)
	void setDefault();
END

DESCRIPTOR(SamplerBindingLayout)
	void setDefault();
END

DESCRIPTOR(SamplerDescriptor)
	void setDefault();
END

DESCRIPTOR(ShaderModuleDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedBufferMemoryBeginAccessDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedBufferMemoryDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedBufferMemoryEndAccessState)
	void setDefault();
	void freeMembers();
END

DESCRIPTOR(SharedBufferMemoryProperties)
	void setDefault();
END

DESCRIPTOR(SharedFenceDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedFenceExportInfo)
	void setDefault();
END

DESCRIPTOR(SharedTextureMemoryBeginAccessDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedTextureMemoryDescriptor)
	void setDefault();
END

DESCRIPTOR(SharedTextureMemoryEndAccessState)
	void setDefault();
	void freeMembers();
END

DESCRIPTOR(StorageTextureBindingLayout)
	void setDefault();
END

DESCRIPTOR(SurfaceCapabilities)
	void setDefault();
	void freeMembers();
END

DESCRIPTOR(SurfaceConfiguration)
	void setDefault();
END

DESCRIPTOR(SurfaceDescriptor)
	void setDefault();
END

DESCRIPTOR(SwapChainDescriptor)
	void setDefault();
END

DESCRIPTOR(TextureBindingLayout)
	void setDefault();
END

DESCRIPTOR(TextureDataLayout)
	void setDefault();
END

DESCRIPTOR(TextureViewDescriptor)
	void setDefault();
END

DESCRIPTOR(UncapturedErrorCallbackInfo)
	void setDefault();
END

DESCRIPTOR(BindGroupDescriptor)
	void setDefault();
END

DESCRIPTOR(BindGroupLayoutEntry)
	void setDefault();
END

DESCRIPTOR(CompilationInfo)
	void setDefault();
END

DESCRIPTOR(ComputePassDescriptor)
	void setDefault();
END

DESCRIPTOR(DepthStencilState)
	void setDefault();
END

DESCRIPTOR(ExternalTextureDescriptor)
	void setDefault();
END

DESCRIPTOR(ImageCopyExternalTexture)
	void setDefault();
END

DESCRIPTOR(InstanceDescriptor)
	void setDefault();
END

DESCRIPTOR(ProgrammableStageDescriptor)
	void setDefault();
END

DESCRIPTOR(RenderPassColorAttachment)
	void setDefault();
END

DESCRIPTOR(RenderPassStorageAttachment)
	void setDefault();
END

DESCRIPTOR(RequiredLimits)
	void setDefault();
END

DESCRIPTOR(SharedTextureMemoryProperties)
	void setDefault();
END

DESCRIPTOR(SupportedLimits)
	void setDefault();
END

DESCRIPTOR(TextureDescriptor)
	void setDefault();
END

DESCRIPTOR(BindGroupLayoutDescriptor)
	void setDefault();
END

DESCRIPTOR(ColorTargetState)
	void setDefault();
END

DESCRIPTOR(ComputePipelineDescriptor)
	void setDefault();
END

DESCRIPTOR(DeviceDescriptor)
	void setDefault();
END

DESCRIPTOR(RenderPassDescriptor)
	void setDefault();
END

DESCRIPTOR(VertexState)
	void setDefault();
END

DESCRIPTOR(FragmentState)
	void setDefault();
END

DESCRIPTOR(RenderPipelineDescriptor)
	void setDefault();
END


// Handles forward declarations
class Adapter;
class BindGroup;
class BindGroupLayout;
class Buffer;
class CommandBuffer;
class CommandEncoder;
class ComputePassEncoder;
class ComputePipeline;
class Device;
class ExternalTexture;
class Instance;
class PipelineLayout;
class QuerySet;
class Queue;
class RenderBundle;
class RenderBundleEncoder;
class RenderPassEncoder;
class RenderPipeline;
class Sampler;
class ShaderModule;
class SharedBufferMemory;
class SharedFence;
class SharedTextureMemory;
class Surface;
class SwapChain;
class Texture;
class TextureView;

// Callback types
using BufferMapCallback = std::function<void(BufferMapAsyncStatus status)>;
using CompilationInfoCallback = std::function<void(CompilationInfoRequestStatus status, const CompilationInfo& compilationInfo)>;
using CreateComputePipelineAsyncCallback = std::function<void(CreatePipelineAsyncStatus status, ComputePipeline pipeline, char const * message)>;
using CreateRenderPipelineAsyncCallback = std::function<void(CreatePipelineAsyncStatus status, RenderPipeline pipeline, char const * message)>;
using DeviceLostCallback = std::function<void(DeviceLostReason reason, char const * message)>;
using ErrorCallback = std::function<void(ErrorType type, char const * message)>;
using LoggingCallback = std::function<void(LoggingType type, char const * message)>;
using PopErrorScopeCallback = std::function<void(PopErrorScopeStatus status, ErrorType type, char const * message)>;
using QueueWorkDoneCallback = std::function<void(QueueWorkDoneStatus status)>;
using RequestAdapterCallback = std::function<void(RequestAdapterStatus status, Adapter adapter, char const * message)>;
using RequestDeviceCallback = std::function<void(RequestDeviceStatus status, Device device, char const * message)>;
using UncapturedErrorCallback = std::function<void(Device const * device, ErrorType type, char const * message, void* userdata1)>;
using ProcDeviceSetDeviceLostCallback = std::function<void(Device device, DeviceLostCallback&& callback)>;
using ProcDeviceSetLoggingCallback = std::function<void(Device device, LoggingCallback&& callback)>;
using ProcDeviceSetUncapturedErrorCallback = std::function<void(Device device, ErrorCallback&& callback)>;

// Handles detailed declarations
HANDLE(Adapter)
	Device createDevice(const DeviceDescriptor& descriptor);
	Device createDevice();
	size_t enumerateFeatures(FeatureName * features);
	Status getFormatCapabilities(TextureFormat format, FormatCapabilities * capabilities);
	Status getInfo(AdapterInfo * info);
	Instance getInstance();
	Status getLimits(SupportedLimits * limits);
	Bool hasFeature(FeatureName feature);
	NO_DISCARD std::unique_ptr<RequestDeviceCallback> requestDevice(const DeviceDescriptor& descriptor, RequestDeviceCallback&& callback);
	Future requestDevice2(const DeviceDescriptor& options, RequestDeviceCallbackInfo2 callbackInfo);
	Future requestDeviceF(const DeviceDescriptor& options, RequestDeviceCallbackInfo callbackInfo);
	void addRef();
	void release();
	Device requestDevice(const DeviceDescriptor& descriptor);
END

HANDLE(BindGroup)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(BindGroupLayout)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Buffer)
	void destroy();
	void const * getConstMappedRange(size_t offset, size_t size);
	BufferMapState getMapState();
	void * getMappedRange(size_t offset, size_t size);
	uint64_t getSize();
	BufferUsage getUsage();
	NO_DISCARD std::unique_ptr<BufferMapCallback> mapAsync(MapMode mode, size_t offset, size_t size, BufferMapCallback&& callback);
	Future mapAsync2(MapMode mode, size_t offset, size_t size, BufferMapCallbackInfo2 callbackInfo);
	Future mapAsyncF(MapMode mode, size_t offset, size_t size, BufferMapCallbackInfo callbackInfo);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void unmap();
	void addRef();
	void release();
END

HANDLE(CommandBuffer)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(CommandEncoder)
	ComputePassEncoder beginComputePass(const ComputePassDescriptor& descriptor);
	ComputePassEncoder beginComputePass();
	RenderPassEncoder beginRenderPass(const RenderPassDescriptor& descriptor);
	void clearBuffer(Buffer buffer, uint64_t offset, uint64_t size);
	void copyBufferToBuffer(Buffer source, uint64_t sourceOffset, Buffer destination, uint64_t destinationOffset, uint64_t size);
	void copyBufferToTexture(const ImageCopyBuffer& source, const ImageCopyTexture& destination, const Extent3D& copySize);
	void copyTextureToBuffer(const ImageCopyTexture& source, const ImageCopyBuffer& destination, const Extent3D& copySize);
	void copyTextureToTexture(const ImageCopyTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize);
	CommandBuffer finish(const CommandBufferDescriptor& descriptor);
	CommandBuffer finish();
	void injectValidationError(char const * message);
	void injectValidationError2(StringView message);
	void insertDebugMarker(char const * markerLabel);
	void insertDebugMarker2(StringView markerLabel);
	void popDebugGroup();
	void pushDebugGroup(char const * groupLabel);
	void pushDebugGroup2(StringView groupLabel);
	void resolveQuerySet(QuerySet querySet, uint32_t firstQuery, uint32_t queryCount, Buffer destination, uint64_t destinationOffset);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void writeBuffer(Buffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size);
	void writeTimestamp(QuerySet querySet, uint32_t queryIndex);
	void addRef();
	void release();
END

HANDLE(ComputePassEncoder)
	void dispatchWorkgroups(uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);
	void dispatchWorkgroupsIndirect(Buffer indirectBuffer, uint64_t indirectOffset);
	void end();
	void insertDebugMarker(char const * markerLabel);
	void insertDebugMarker2(StringView markerLabel);
	void popDebugGroup();
	void pushDebugGroup(char const * groupLabel);
	void pushDebugGroup2(StringView groupLabel);
	void setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void setPipeline(ComputePipeline pipeline);
	void writeTimestamp(QuerySet querySet, uint32_t queryIndex);
	void addRef();
	void release();
END

HANDLE(ComputePipeline)
	BindGroupLayout getBindGroupLayout(uint32_t groupIndex);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Device)
	BindGroup createBindGroup(const BindGroupDescriptor& descriptor);
	BindGroupLayout createBindGroupLayout(const BindGroupLayoutDescriptor& descriptor);
	Buffer createBuffer(const BufferDescriptor& descriptor);
	CommandEncoder createCommandEncoder(const CommandEncoderDescriptor& descriptor);
	CommandEncoder createCommandEncoder();
	ComputePipeline createComputePipeline(const ComputePipelineDescriptor& descriptor);
	NO_DISCARD std::unique_ptr<CreateComputePipelineAsyncCallback> createComputePipelineAsync(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallback&& callback);
	Future createComputePipelineAsync2(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallbackInfo2 callbackInfo);
	Future createComputePipelineAsyncF(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallbackInfo callbackInfo);
	Buffer createErrorBuffer(const BufferDescriptor& descriptor);
	ExternalTexture createErrorExternalTexture();
	ShaderModule createErrorShaderModule(const ShaderModuleDescriptor& descriptor, char const * errorMessage);
	ShaderModule createErrorShaderModule2(const ShaderModuleDescriptor& descriptor, StringView errorMessage);
	Texture createErrorTexture(const TextureDescriptor& descriptor);
	ExternalTexture createExternalTexture(const ExternalTextureDescriptor& externalTextureDescriptor);
	PipelineLayout createPipelineLayout(const PipelineLayoutDescriptor& descriptor);
	QuerySet createQuerySet(const QuerySetDescriptor& descriptor);
	RenderBundleEncoder createRenderBundleEncoder(const RenderBundleEncoderDescriptor& descriptor);
	RenderPipeline createRenderPipeline(const RenderPipelineDescriptor& descriptor);
	NO_DISCARD std::unique_ptr<CreateRenderPipelineAsyncCallback> createRenderPipelineAsync(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallback&& callback);
	Future createRenderPipelineAsync2(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallbackInfo2 callbackInfo);
	Future createRenderPipelineAsyncF(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallbackInfo callbackInfo);
	Sampler createSampler(const SamplerDescriptor& descriptor);
	Sampler createSampler();
	ShaderModule createShaderModule(const ShaderModuleDescriptor& descriptor);
	SwapChain createSwapChain(Surface surface, const SwapChainDescriptor& descriptor);
	Texture createTexture(const TextureDescriptor& descriptor);
	void destroy();
	size_t enumerateFeatures(FeatureName * features);
	void forceLoss(DeviceLostReason type, char const * message);
	void forceLoss2(DeviceLostReason type, StringView message);
	Status getAHardwareBufferProperties(void * handle, AHardwareBufferProperties * properties);
	Adapter getAdapter();
	Status getLimits(SupportedLimits * limits);
	Queue getQueue();
	TextureUsage getSupportedSurfaceUsage(Surface surface);
	Bool hasFeature(FeatureName feature);
	SharedBufferMemory importSharedBufferMemory(const SharedBufferMemoryDescriptor& descriptor);
	SharedFence importSharedFence(const SharedFenceDescriptor& descriptor);
	SharedTextureMemory importSharedTextureMemory(const SharedTextureMemoryDescriptor& descriptor);
	void injectError(ErrorType type, char const * message);
	void injectError2(ErrorType type, StringView message);
	NO_DISCARD std::unique_ptr<ErrorCallback> popErrorScope(ErrorCallback&& oldCallback);
	Future popErrorScope2(PopErrorScopeCallbackInfo2 callbackInfo);
	Future popErrorScopeF(PopErrorScopeCallbackInfo callbackInfo);
	void pushErrorScope(ErrorFilter filter);
	NO_DISCARD std::unique_ptr<DeviceLostCallback> setDeviceLostCallback(DeviceLostCallback&& callback);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	NO_DISCARD std::unique_ptr<LoggingCallback> setLoggingCallback(LoggingCallback&& callback);
	NO_DISCARD std::unique_ptr<ErrorCallback> setUncapturedErrorCallback(ErrorCallback&& callback);
	void tick();
	void validateTextureDescriptor(const TextureDescriptor& descriptor);
	void addRef();
	void release();
END

HANDLE(ExternalTexture)
	void destroy();
	void expire();
	void refresh();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Instance)
	Surface createSurface(const SurfaceDescriptor& descriptor);
	size_t enumerateWGSLLanguageFeatures(WGSLFeatureName * features);
	Bool hasWGSLLanguageFeature(WGSLFeatureName feature);
	void processEvents();
	NO_DISCARD std::unique_ptr<RequestAdapterCallback> requestAdapter(const RequestAdapterOptions& options, RequestAdapterCallback&& callback);
	Future requestAdapter2(const RequestAdapterOptions& options, RequestAdapterCallbackInfo2 callbackInfo);
	Future requestAdapterF(const RequestAdapterOptions& options, RequestAdapterCallbackInfo callbackInfo);
	WaitStatus waitAny(size_t futureCount, FutureWaitInfo * futures, uint64_t timeoutNS);
	void addRef();
	void release();
	Adapter requestAdapter(const RequestAdapterOptions& options);
END

HANDLE(PipelineLayout)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(QuerySet)
	void destroy();
	uint32_t getCount();
	QueryType getType();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Queue)
	void copyExternalTextureForBrowser(const ImageCopyExternalTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize, const CopyTextureForBrowserOptions& options);
	void copyTextureForBrowser(const ImageCopyTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize, const CopyTextureForBrowserOptions& options);
	NO_DISCARD std::unique_ptr<QueueWorkDoneCallback> onSubmittedWorkDone(QueueWorkDoneCallback&& callback);
	Future onSubmittedWorkDone2(QueueWorkDoneCallbackInfo2 callbackInfo);
	Future onSubmittedWorkDoneF(QueueWorkDoneCallbackInfo callbackInfo);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void submit(size_t commandCount, CommandBuffer const * commands);
	void submit(const std::vector<WGPUCommandBuffer>& commands);
	void submit(const WGPUCommandBuffer& commands);
	void writeBuffer(Buffer buffer, uint64_t bufferOffset, void const * data, size_t size);
	void writeTexture(const ImageCopyTexture& destination, void const * data, size_t dataSize, const TextureDataLayout& dataLayout, const Extent3D& writeSize);
	void addRef();
	void release();
END

HANDLE(RenderBundle)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(RenderBundleEncoder)
	void draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
	void drawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);
	void drawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset);
	void drawIndirect(Buffer indirectBuffer, uint64_t indirectOffset);
	RenderBundle finish(const RenderBundleDescriptor& descriptor);
	RenderBundle finish();
	void insertDebugMarker(char const * markerLabel);
	void insertDebugMarker2(StringView markerLabel);
	void popDebugGroup();
	void pushDebugGroup(char const * groupLabel);
	void pushDebugGroup2(StringView groupLabel);
	void setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets);
	void setIndexBuffer(Buffer buffer, IndexFormat format, uint64_t offset, uint64_t size);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void setPipeline(RenderPipeline pipeline);
	void setVertexBuffer(uint32_t slot, Buffer buffer, uint64_t offset, uint64_t size);
	void addRef();
	void release();
END

HANDLE(RenderPassEncoder)
	void beginOcclusionQuery(uint32_t queryIndex);
	void draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
	void drawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);
	void drawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset);
	void drawIndirect(Buffer indirectBuffer, uint64_t indirectOffset);
	void end();
	void endOcclusionQuery();
	void executeBundles(size_t bundleCount, RenderBundle const * bundles);
	void executeBundles(const std::vector<WGPURenderBundle>& bundles);
	void executeBundles(const WGPURenderBundle& bundles);
	void insertDebugMarker(char const * markerLabel);
	void insertDebugMarker2(StringView markerLabel);
	void multiDrawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, Buffer drawCountBuffer, uint64_t drawCountBufferOffset);
	void multiDrawIndirect(Buffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, Buffer drawCountBuffer, uint64_t drawCountBufferOffset);
	void pixelLocalStorageBarrier();
	void popDebugGroup();
	void pushDebugGroup(char const * groupLabel);
	void pushDebugGroup2(StringView groupLabel);
	void setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets);
	void setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets);
	void setBlendConstant(const Color& color);
	void setIndexBuffer(Buffer buffer, IndexFormat format, uint64_t offset, uint64_t size);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void setPipeline(RenderPipeline pipeline);
	void setScissorRect(uint32_t x, uint32_t y, uint32_t width, uint32_t height);
	void setStencilReference(uint32_t reference);
	void setVertexBuffer(uint32_t slot, Buffer buffer, uint64_t offset, uint64_t size);
	void setViewport(float x, float y, float width, float height, float minDepth, float maxDepth);
	void writeTimestamp(QuerySet querySet, uint32_t queryIndex);
	void addRef();
	void release();
END

HANDLE(RenderPipeline)
	BindGroupLayout getBindGroupLayout(uint32_t groupIndex);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Sampler)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(ShaderModule)
	NO_DISCARD std::unique_ptr<CompilationInfoCallback> getCompilationInfo(CompilationInfoCallback&& callback);
	Future getCompilationInfo2(CompilationInfoCallbackInfo2 callbackInfo);
	Future getCompilationInfoF(CompilationInfoCallbackInfo callbackInfo);
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(SharedBufferMemory)
	Status beginAccess(Buffer buffer, const SharedBufferMemoryBeginAccessDescriptor& descriptor);
	Buffer createBuffer(const BufferDescriptor& descriptor);
	Buffer createBuffer();
	Status endAccess(Buffer buffer, SharedBufferMemoryEndAccessState * descriptor);
	Status getProperties(SharedBufferMemoryProperties * properties);
	Bool isDeviceLost();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(SharedFence)
	void exportInfo(SharedFenceExportInfo * info);
	void addRef();
	void release();
END

HANDLE(SharedTextureMemory)
	Status beginAccess(Texture texture, const SharedTextureMemoryBeginAccessDescriptor& descriptor);
	Texture createTexture(const TextureDescriptor& descriptor);
	Texture createTexture();
	Status endAccess(Texture texture, SharedTextureMemoryEndAccessState * descriptor);
	Status getProperties(SharedTextureMemoryProperties * properties);
	Bool isDeviceLost();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(Surface)
	void configure(const SurfaceConfiguration& config);
	Status getCapabilities(Adapter adapter, SurfaceCapabilities * capabilities);
	void getCurrentTexture(SurfaceTexture * surfaceTexture);
	TextureFormat getPreferredFormat(Adapter adapter);
	void present();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void unconfigure();
	void addRef();
	void release();
END

HANDLE(SwapChain)
	Texture getCurrentTexture();
	TextureView getCurrentTextureView();
	void present();
	void addRef();
	void release();
END

HANDLE(Texture)
	TextureView createErrorView(const TextureViewDescriptor& descriptor);
	TextureView createErrorView();
	TextureView createView(const TextureViewDescriptor& descriptor);
	TextureView createView();
	void destroy();
	uint32_t getDepthOrArrayLayers();
	TextureDimension getDimension();
	TextureFormat getFormat();
	uint32_t getHeight();
	uint32_t getMipLevelCount();
	uint32_t getSampleCount();
	TextureUsage getUsage();
	uint32_t getWidth();
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END

HANDLE(TextureView)
	void setLabel(char const * label);
	void setLabel2(StringView label);
	void addRef();
	void release();
END


// Non-member procedures


Instance createInstance(const InstanceDescriptor& descriptor);

#ifdef WEBGPU_CPP_IMPLEMENTATION

Instance createInstance(const InstanceDescriptor& descriptor) {
	return wgpuCreateInstance(&descriptor);
}

// Handles members implementation
// Methods of ChainedStruct
void ChainedStruct::setDefault() {
}


// Methods of ChainedStructOut
void ChainedStructOut::setDefault() {
}


// Methods of BufferMapCallbackInfo2
void BufferMapCallbackInfo2::setDefault() {
}


// Methods of CompilationInfoCallbackInfo2
void CompilationInfoCallbackInfo2::setDefault() {
}


// Methods of CreateComputePipelineAsyncCallbackInfo2
void CreateComputePipelineAsyncCallbackInfo2::setDefault() {
}


// Methods of CreateRenderPipelineAsyncCallbackInfo2
void CreateRenderPipelineAsyncCallbackInfo2::setDefault() {
}


// Methods of DeviceLostCallbackInfo2
void DeviceLostCallbackInfo2::setDefault() {
}


// Methods of PopErrorScopeCallbackInfo2
void PopErrorScopeCallbackInfo2::setDefault() {
}


// Methods of QueueWorkDoneCallbackInfo2
void QueueWorkDoneCallbackInfo2::setDefault() {
}


// Methods of RequestAdapterCallbackInfo2
void RequestAdapterCallbackInfo2::setDefault() {
}


// Methods of RequestDeviceCallbackInfo2
void RequestDeviceCallbackInfo2::setDefault() {
}


// Methods of UncapturedErrorCallbackInfo2
void UncapturedErrorCallbackInfo2::setDefault() {
}


// Methods of INTERNAL__HAVE_EMDAWNWEBGPU_HEADER
void INTERNAL__HAVE_EMDAWNWEBGPU_HEADER::setDefault() {
}


// Methods of AdapterInfo
void AdapterInfo::setDefault() {
	backendType = BackendType::Undefined;
}
void AdapterInfo::freeMembers() {
	return wgpuAdapterInfoFreeMembers(*this);
}


// Methods of AdapterPropertiesD3D
void AdapterPropertiesD3D::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::AdapterPropertiesD3D;
}


// Methods of AdapterPropertiesVk
void AdapterPropertiesVk::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::AdapterPropertiesVk;
}


// Methods of BindGroupEntry
void BindGroupEntry::setDefault() {
	offset = 0;
}


// Methods of BlendComponent
void BlendComponent::setDefault() {
	operation = BlendOperation::Add;
	srcFactor = BlendFactor::One;
	dstFactor = BlendFactor::Zero;
}


// Methods of BufferBindingLayout
void BufferBindingLayout::setDefault() {
	type = BufferBindingType::Uniform;
	hasDynamicOffset = false;
	minBindingSize = 0;
}


// Methods of BufferDescriptor
void BufferDescriptor::setDefault() {
	mappedAtCreation = false;
}


// Methods of BufferHostMappedPointer
void BufferHostMappedPointer::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::BufferHostMappedPointer;
}


// Methods of BufferMapCallbackInfo
void BufferMapCallbackInfo::setDefault() {
}


// Methods of Color
void Color::setDefault() {
}


// Methods of ColorTargetStateExpandResolveTextureDawn
void ColorTargetStateExpandResolveTextureDawn::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::ColorTargetStateExpandResolveTextureDawn;
}


// Methods of CommandBufferDescriptor
void CommandBufferDescriptor::setDefault() {
}


// Methods of CommandEncoderDescriptor
void CommandEncoderDescriptor::setDefault() {
}


// Methods of CompilationInfoCallbackInfo
void CompilationInfoCallbackInfo::setDefault() {
}


// Methods of CompilationMessage
void CompilationMessage::setDefault() {
}


// Methods of ComputePassTimestampWrites
void ComputePassTimestampWrites::setDefault() {
}


// Methods of ConstantEntry
void ConstantEntry::setDefault() {
}


// Methods of CopyTextureForBrowserOptions
void CopyTextureForBrowserOptions::setDefault() {
}


// Methods of CreateComputePipelineAsyncCallbackInfo
void CreateComputePipelineAsyncCallbackInfo::setDefault() {
}


// Methods of CreateRenderPipelineAsyncCallbackInfo
void CreateRenderPipelineAsyncCallbackInfo::setDefault() {
}


// Methods of DawnWGSLBlocklist
void DawnWGSLBlocklist::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnWGSLBlocklist;
}


// Methods of DawnAdapterPropertiesPowerPreference
void DawnAdapterPropertiesPowerPreference::setDefault() {
	powerPreference = PowerPreference::Undefined;
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::DawnAdapterPropertiesPowerPreference;
}


// Methods of DawnBufferDescriptorErrorInfoFromWireClient
void DawnBufferDescriptorErrorInfoFromWireClient::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnBufferDescriptorErrorInfoFromWireClient;
}


// Methods of DawnCacheDeviceDescriptor
void DawnCacheDeviceDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnCacheDeviceDescriptor;
}


// Methods of DawnComputePipelineFullSubgroups
void DawnComputePipelineFullSubgroups::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnComputePipelineFullSubgroups;
}


// Methods of DawnEncoderInternalUsageDescriptor
void DawnEncoderInternalUsageDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnEncoderInternalUsageDescriptor;
}


// Methods of DawnExperimentalSubgroupLimits
void DawnExperimentalSubgroupLimits::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::DawnExperimentalSubgroupLimits;
}


// Methods of DawnRenderPassColorAttachmentRenderToSingleSampled
void DawnRenderPassColorAttachmentRenderToSingleSampled::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnRenderPassColorAttachmentRenderToSingleSampled;
}


// Methods of DawnShaderModuleSPIRVOptionsDescriptor
void DawnShaderModuleSPIRVOptionsDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnShaderModuleSPIRVOptionsDescriptor;
}


// Methods of DawnTextureInternalUsageDescriptor
void DawnTextureInternalUsageDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnTextureInternalUsageDescriptor;
}


// Methods of DawnTogglesDescriptor
void DawnTogglesDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnTogglesDescriptor;
}


// Methods of DawnWireWGSLControl
void DawnWireWGSLControl::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::DawnWireWGSLControl;
}


// Methods of DeviceLostCallbackInfo
void DeviceLostCallbackInfo::setDefault() {
}


// Methods of DrmFormatProperties
void DrmFormatProperties::setDefault() {
}


// Methods of Extent2D
void Extent2D::setDefault() {
}


// Methods of Extent3D
void Extent3D::setDefault() {
	height = 1;
	depthOrArrayLayers = 1;
}


// Methods of ExternalTextureBindingEntry
void ExternalTextureBindingEntry::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::ExternalTextureBindingEntry;
}


// Methods of ExternalTextureBindingLayout
void ExternalTextureBindingLayout::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::ExternalTextureBindingLayout;
}


// Methods of FormatCapabilities
void FormatCapabilities::setDefault() {
}


// Methods of Future
void Future::setDefault() {
}


// Methods of InstanceFeatures
void InstanceFeatures::setDefault() {
}


// Methods of Limits
void Limits::setDefault() {
	maxTextureDimension1D = WGPU_LIMIT_U32_UNDEFINED;
	maxTextureDimension2D = WGPU_LIMIT_U32_UNDEFINED;
	maxTextureDimension3D = WGPU_LIMIT_U32_UNDEFINED;
	maxTextureArrayLayers = WGPU_LIMIT_U32_UNDEFINED;
	maxBindGroups = WGPU_LIMIT_U32_UNDEFINED;
	maxBindGroupsPlusVertexBuffers = WGPU_LIMIT_U32_UNDEFINED;
	maxBindingsPerBindGroup = WGPU_LIMIT_U32_UNDEFINED;
	maxDynamicUniformBuffersPerPipelineLayout = WGPU_LIMIT_U32_UNDEFINED;
	maxDynamicStorageBuffersPerPipelineLayout = WGPU_LIMIT_U32_UNDEFINED;
	maxSampledTexturesPerShaderStage = WGPU_LIMIT_U32_UNDEFINED;
	maxSamplersPerShaderStage = WGPU_LIMIT_U32_UNDEFINED;
	maxStorageBuffersPerShaderStage = WGPU_LIMIT_U32_UNDEFINED;
	maxStorageTexturesPerShaderStage = WGPU_LIMIT_U32_UNDEFINED;
	maxUniformBuffersPerShaderStage = WGPU_LIMIT_U32_UNDEFINED;
	maxUniformBufferBindingSize = WGPU_LIMIT_U64_UNDEFINED;
	maxStorageBufferBindingSize = WGPU_LIMIT_U64_UNDEFINED;
	minUniformBufferOffsetAlignment = WGPU_LIMIT_U32_UNDEFINED;
	minStorageBufferOffsetAlignment = WGPU_LIMIT_U32_UNDEFINED;
	maxVertexBuffers = WGPU_LIMIT_U32_UNDEFINED;
	maxBufferSize = WGPU_LIMIT_U64_UNDEFINED;
	maxVertexAttributes = WGPU_LIMIT_U32_UNDEFINED;
	maxVertexBufferArrayStride = WGPU_LIMIT_U32_UNDEFINED;
	maxInterStageShaderComponents = WGPU_LIMIT_U32_UNDEFINED;
	maxInterStageShaderVariables = WGPU_LIMIT_U32_UNDEFINED;
	maxColorAttachments = WGPU_LIMIT_U32_UNDEFINED;
	maxColorAttachmentBytesPerSample = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeWorkgroupStorageSize = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeInvocationsPerWorkgroup = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeWorkgroupSizeX = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeWorkgroupSizeY = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeWorkgroupSizeZ = WGPU_LIMIT_U32_UNDEFINED;
	maxComputeWorkgroupsPerDimension = WGPU_LIMIT_U32_UNDEFINED;
}


// Methods of MemoryHeapInfo
void MemoryHeapInfo::setDefault() {
}


// Methods of MultisampleState
void MultisampleState::setDefault() {
	count = 1;
	mask = 0xFFFFFFFF;
	alphaToCoverageEnabled = false;
}


// Methods of Origin2D
void Origin2D::setDefault() {
}


// Methods of Origin3D
void Origin3D::setDefault() {
	x = 0;
	y = 0;
	z = 0;
}


// Methods of PipelineLayoutDescriptor
void PipelineLayoutDescriptor::setDefault() {
}


// Methods of PipelineLayoutStorageAttachment
void PipelineLayoutStorageAttachment::setDefault() {
	format = TextureFormat::Undefined;
}


// Methods of PopErrorScopeCallbackInfo
void PopErrorScopeCallbackInfo::setDefault() {
}


// Methods of PrimitiveState
void PrimitiveState::setDefault() {
	topology = PrimitiveTopology::TriangleList;
	stripIndexFormat = IndexFormat::Undefined;
	frontFace = FrontFace::CCW;
	cullMode = CullMode::None;
}


// Methods of QuerySetDescriptor
void QuerySetDescriptor::setDefault() {
}


// Methods of QueueDescriptor
void QueueDescriptor::setDefault() {
}


// Methods of QueueWorkDoneCallbackInfo
void QueueWorkDoneCallbackInfo::setDefault() {
}


// Methods of RenderBundleDescriptor
void RenderBundleDescriptor::setDefault() {
}


// Methods of RenderBundleEncoderDescriptor
void RenderBundleEncoderDescriptor::setDefault() {
	depthStencilFormat = TextureFormat::Undefined;
	depthReadOnly = false;
	stencilReadOnly = false;
	sampleCount = 1;
}


// Methods of RenderPassDepthStencilAttachment
void RenderPassDepthStencilAttachment::setDefault() {
	depthLoadOp = LoadOp::Undefined;
	depthStoreOp = StoreOp::Undefined;
	depthReadOnly = false;
	stencilLoadOp = LoadOp::Undefined;
	stencilStoreOp = StoreOp::Undefined;
	stencilClearValue = 0;
	stencilReadOnly = false;
}


// Methods of RenderPassDescriptorExpandResolveRect
void RenderPassDescriptorExpandResolveRect::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::RenderPassDescriptorExpandResolveRect;
}


// Methods of RenderPassMaxDrawCount
void RenderPassMaxDrawCount::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::RenderPassMaxDrawCount;
}


// Methods of RenderPassTimestampWrites
void RenderPassTimestampWrites::setDefault() {
}


// Methods of RequestAdapterCallbackInfo
void RequestAdapterCallbackInfo::setDefault() {
}


// Methods of RequestAdapterOptions
void RequestAdapterOptions::setDefault() {
	powerPreference = PowerPreference::Undefined;
	backendType = BackendType::Undefined;
	forceFallbackAdapter = false;
}


// Methods of RequestDeviceCallbackInfo
void RequestDeviceCallbackInfo::setDefault() {
}


// Methods of SamplerBindingLayout
void SamplerBindingLayout::setDefault() {
	type = SamplerBindingType::Filtering;
}


// Methods of SamplerDescriptor
void SamplerDescriptor::setDefault() {
	addressModeU = AddressMode::ClampToEdge;
	addressModeV = AddressMode::ClampToEdge;
	addressModeW = AddressMode::ClampToEdge;
	magFilter = FilterMode::Nearest;
	minFilter = FilterMode::Nearest;
	mipmapFilter = MipmapFilterMode::Nearest;
	lodMinClamp = 0;
	lodMaxClamp = 32;
	compare = CompareFunction::Undefined;
}


// Methods of ShaderModuleCompilationOptions
void ShaderModuleCompilationOptions::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::ShaderModuleCompilationOptions;
}


// Methods of ShaderModuleDescriptor
void ShaderModuleDescriptor::setDefault() {
}


// Methods of ShaderSourceSPIRV
void ShaderSourceSPIRV::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::ShaderSourceSPIRV;
}


// Methods of SharedBufferMemoryBeginAccessDescriptor
void SharedBufferMemoryBeginAccessDescriptor::setDefault() {
}


// Methods of SharedBufferMemoryDescriptor
void SharedBufferMemoryDescriptor::setDefault() {
}


// Methods of SharedBufferMemoryEndAccessState
void SharedBufferMemoryEndAccessState::setDefault() {
}
void SharedBufferMemoryEndAccessState::freeMembers() {
	return wgpuSharedBufferMemoryEndAccessStateFreeMembers(*this);
}


// Methods of SharedBufferMemoryProperties
void SharedBufferMemoryProperties::setDefault() {
}


// Methods of SharedFenceDXGISharedHandleDescriptor
void SharedFenceDXGISharedHandleDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedFenceDXGISharedHandleDescriptor;
}


// Methods of SharedFenceDXGISharedHandleExportInfo
void SharedFenceDXGISharedHandleExportInfo::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedFenceDXGISharedHandleExportInfo;
}


// Methods of SharedFenceMTLSharedEventDescriptor
void SharedFenceMTLSharedEventDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedFenceMTLSharedEventDescriptor;
}


// Methods of SharedFenceMTLSharedEventExportInfo
void SharedFenceMTLSharedEventExportInfo::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedFenceMTLSharedEventExportInfo;
}


// Methods of SharedFenceDescriptor
void SharedFenceDescriptor::setDefault() {
}


// Methods of SharedFenceExportInfo
void SharedFenceExportInfo::setDefault() {
}


// Methods of SharedFenceVkSemaphoreOpaqueFDDescriptor
void SharedFenceVkSemaphoreOpaqueFDDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreOpaqueFDDescriptor;
}


// Methods of SharedFenceVkSemaphoreOpaqueFDExportInfo
void SharedFenceVkSemaphoreOpaqueFDExportInfo::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreOpaqueFDExportInfo;
}


// Methods of SharedFenceVkSemaphoreSyncFDDescriptor
void SharedFenceVkSemaphoreSyncFDDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreSyncFDDescriptor;
}


// Methods of SharedFenceVkSemaphoreSyncFDExportInfo
void SharedFenceVkSemaphoreSyncFDExportInfo::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreSyncFDExportInfo;
}


// Methods of SharedFenceVkSemaphoreZirconHandleDescriptor
void SharedFenceVkSemaphoreZirconHandleDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreZirconHandleDescriptor;
}


// Methods of SharedFenceVkSemaphoreZirconHandleExportInfo
void SharedFenceVkSemaphoreZirconHandleExportInfo::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedFenceVkSemaphoreZirconHandleExportInfo;
}


// Methods of SharedTextureMemoryD3DSwapchainBeginState
void SharedTextureMemoryD3DSwapchainBeginState::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryD3DSwapchainBeginState;
}


// Methods of SharedTextureMemoryDXGISharedHandleDescriptor
void SharedTextureMemoryDXGISharedHandleDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryDXGISharedHandleDescriptor;
}


// Methods of SharedTextureMemoryEGLImageDescriptor
void SharedTextureMemoryEGLImageDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryEGLImageDescriptor;
}


// Methods of SharedTextureMemoryIOSurfaceDescriptor
void SharedTextureMemoryIOSurfaceDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryIOSurfaceDescriptor;
}


// Methods of SharedTextureMemoryAHardwareBufferDescriptor
void SharedTextureMemoryAHardwareBufferDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryAHardwareBufferDescriptor;
}


// Methods of SharedTextureMemoryBeginAccessDescriptor
void SharedTextureMemoryBeginAccessDescriptor::setDefault() {
}


// Methods of SharedTextureMemoryDescriptor
void SharedTextureMemoryDescriptor::setDefault() {
}


// Methods of SharedTextureMemoryDmaBufPlane
void SharedTextureMemoryDmaBufPlane::setDefault() {
}


// Methods of SharedTextureMemoryEndAccessState
void SharedTextureMemoryEndAccessState::setDefault() {
}
void SharedTextureMemoryEndAccessState::freeMembers() {
	return wgpuSharedTextureMemoryEndAccessStateFreeMembers(*this);
}


// Methods of SharedTextureMemoryOpaqueFDDescriptor
void SharedTextureMemoryOpaqueFDDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryOpaqueFDDescriptor;
}


// Methods of SharedTextureMemoryVkDedicatedAllocationDescriptor
void SharedTextureMemoryVkDedicatedAllocationDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryVkDedicatedAllocationDescriptor;
}


// Methods of SharedTextureMemoryVkImageLayoutBeginState
void SharedTextureMemoryVkImageLayoutBeginState::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryVkImageLayoutBeginState;
}


// Methods of SharedTextureMemoryVkImageLayoutEndState
void SharedTextureMemoryVkImageLayoutEndState::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryVkImageLayoutEndState;
}


// Methods of SharedTextureMemoryZirconHandleDescriptor
void SharedTextureMemoryZirconHandleDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SharedTextureMemoryZirconHandleDescriptor;
}


// Methods of StaticSamplerBindingLayout
void StaticSamplerBindingLayout::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::StaticSamplerBindingLayout;
}


// Methods of StencilFaceState
void StencilFaceState::setDefault() {
	compare = CompareFunction::Always;
	failOp = StencilOperation::Keep;
	depthFailOp = StencilOperation::Keep;
	passOp = StencilOperation::Keep;
}


// Methods of StorageTextureBindingLayout
void StorageTextureBindingLayout::setDefault() {
	access = StorageTextureAccess::WriteOnly;
	format = TextureFormat::Undefined;
	viewDimension = TextureViewDimension::_2D;
}


// Methods of StringView
void StringView::setDefault() {
}


// Methods of SurfaceCapabilities
void SurfaceCapabilities::setDefault() {
}
void SurfaceCapabilities::freeMembers() {
	return wgpuSurfaceCapabilitiesFreeMembers(*this);
}


// Methods of SurfaceConfiguration
void SurfaceConfiguration::setDefault() {
	format = TextureFormat::Undefined;
}


// Methods of SurfaceDescriptor
void SurfaceDescriptor::setDefault() {
}


// Methods of SurfaceDescriptorFromWindowsCoreWindow
void SurfaceDescriptorFromWindowsCoreWindow::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceDescriptorFromWindowsCoreWindow;
}


// Methods of SurfaceDescriptorFromWindowsSwapChainPanel
void SurfaceDescriptorFromWindowsSwapChainPanel::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceDescriptorFromWindowsSwapChainPanel;
}


// Methods of SurfaceSourceXCBWindow
void SurfaceSourceXCBWindow::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceXCBWindow;
}


// Methods of SurfaceSourceAndroidNativeWindow
void SurfaceSourceAndroidNativeWindow::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceAndroidNativeWindow;
}


// Methods of SurfaceSourceCanvasHTMLSelector_Emscripten
void SurfaceSourceCanvasHTMLSelector_Emscripten::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
}


// Methods of SurfaceSourceMetalLayer
void SurfaceSourceMetalLayer::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceMetalLayer;
}


// Methods of SurfaceSourceWaylandSurface
void SurfaceSourceWaylandSurface::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceWaylandSurface;
}


// Methods of SurfaceSourceWindowsHWND
void SurfaceSourceWindowsHWND::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceWindowsHWND;
}


// Methods of SurfaceSourceXlibWindow
void SurfaceSourceXlibWindow::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::SurfaceSourceXlibWindow;
}


// Methods of SurfaceTexture
void SurfaceTexture::setDefault() {
}


// Methods of SwapChainDescriptor
void SwapChainDescriptor::setDefault() {
	format = TextureFormat::Undefined;
}


// Methods of TextureBindingLayout
void TextureBindingLayout::setDefault() {
	sampleType = TextureSampleType::Float;
	viewDimension = TextureViewDimension::_2D;
	multisampled = false;
}


// Methods of TextureBindingViewDimensionDescriptor
void TextureBindingViewDimensionDescriptor::setDefault() {
	textureBindingViewDimension = TextureViewDimension::Undefined;
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::TextureBindingViewDimensionDescriptor;
}


// Methods of TextureDataLayout
void TextureDataLayout::setDefault() {
}


// Methods of TextureViewDescriptor
void TextureViewDescriptor::setDefault() {
	format = TextureFormat::Undefined;
	dimension = TextureViewDimension::Undefined;
	baseMipLevel = 0;
	baseArrayLayer = 0;
	aspect = TextureAspect::All;
}


// Methods of UncapturedErrorCallbackInfo
void UncapturedErrorCallbackInfo::setDefault() {
}


// Methods of VertexAttribute
void VertexAttribute::setDefault() {
}


// Methods of YCbCrVkDescriptor
void YCbCrVkDescriptor::setDefault() {
	vkChromaFilter = FilterMode::Undefined;
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::YCbCrVkDescriptor;
}


// Methods of AHardwareBufferProperties
void AHardwareBufferProperties::setDefault() {
	((YCbCrVkDescriptor*)&yCbCrInfo)->setDefault();
}


// Methods of AdapterPropertiesMemoryHeaps
void AdapterPropertiesMemoryHeaps::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::AdapterPropertiesMemoryHeaps;
}
void AdapterPropertiesMemoryHeaps::freeMembers() {
	return wgpuAdapterPropertiesMemoryHeapsFreeMembers(*this);
}


// Methods of BindGroupDescriptor
void BindGroupDescriptor::setDefault() {
}


// Methods of BindGroupLayoutEntry
void BindGroupLayoutEntry::setDefault() {
	((BufferBindingLayout*)&buffer)->setDefault();
	((SamplerBindingLayout*)&sampler)->setDefault();
	((TextureBindingLayout*)&texture)->setDefault();
	((StorageTextureBindingLayout*)&storageTexture)->setDefault();
	buffer.type = BufferBindingType::Undefined;
	sampler.type = SamplerBindingType::Undefined;
	storageTexture.access = StorageTextureAccess::Undefined;
	texture.sampleType = TextureSampleType::Undefined;
}


// Methods of BlendState
void BlendState::setDefault() {
	((BlendComponent*)&color)->setDefault();
	((BlendComponent*)&alpha)->setDefault();
}


// Methods of CompilationInfo
void CompilationInfo::setDefault() {
}


// Methods of ComputePassDescriptor
void ComputePassDescriptor::setDefault() {
}


// Methods of DepthStencilState
void DepthStencilState::setDefault() {
	format = TextureFormat::Undefined;
	depthWriteEnabled = OptionalBool::Undefined;
	depthCompare = CompareFunction::Undefined;
	stencilReadMask = 0xFFFFFFFF;
	stencilWriteMask = 0xFFFFFFFF;
	depthBias = 0;
	depthBiasSlopeScale = 0;
	depthBiasClamp = 0;
	((StencilFaceState*)&stencilFront)->setDefault();
	((StencilFaceState*)&stencilBack)->setDefault();
}


// Methods of DrmFormatCapabilities
void DrmFormatCapabilities::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	chain.sType = SType::DrmFormatCapabilities;
}
void DrmFormatCapabilities::freeMembers() {
	return wgpuDrmFormatCapabilitiesFreeMembers(*this);
}


// Methods of ExternalTextureDescriptor
void ExternalTextureDescriptor::setDefault() {
	((Origin2D*)&visibleOrigin)->setDefault();
	((Extent2D*)&visibleSize)->setDefault();
}


// Methods of FutureWaitInfo
void FutureWaitInfo::setDefault() {
	((Future*)&future)->setDefault();
}


// Methods of ImageCopyBuffer
void ImageCopyBuffer::setDefault() {
	((TextureDataLayout*)&layout)->setDefault();
}


// Methods of ImageCopyExternalTexture
void ImageCopyExternalTexture::setDefault() {
	((Origin3D*)&origin)->setDefault();
	((Extent2D*)&naturalSize)->setDefault();
}


// Methods of ImageCopyTexture
void ImageCopyTexture::setDefault() {
	mipLevel = 0;
	aspect = TextureAspect::All;
	((Origin3D*)&origin)->setDefault();
}


// Methods of InstanceDescriptor
void InstanceDescriptor::setDefault() {
	((InstanceFeatures*)&features)->setDefault();
}


// Methods of PipelineLayoutPixelLocalStorage
void PipelineLayoutPixelLocalStorage::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::PipelineLayoutPixelLocalStorage;
}


// Methods of ProgrammableStageDescriptor
void ProgrammableStageDescriptor::setDefault() {
}


// Methods of RenderPassColorAttachment
void RenderPassColorAttachment::setDefault() {
	loadOp = LoadOp::Undefined;
	storeOp = StoreOp::Undefined;
	((Color*)&clearValue)->setDefault();
}


// Methods of RenderPassStorageAttachment
void RenderPassStorageAttachment::setDefault() {
	loadOp = LoadOp::Undefined;
	storeOp = StoreOp::Undefined;
	((Color*)&clearValue)->setDefault();
}


// Methods of RequiredLimits
void RequiredLimits::setDefault() {
	((Limits*)&limits)->setDefault();
}


// Methods of ShaderSourceWGSL
void ShaderSourceWGSL::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	((StringView*)&code)->setDefault();
	chain.sType = SType::ShaderSourceWGSL;
}


// Methods of SharedTextureMemoryAHardwareBufferProperties
void SharedTextureMemoryAHardwareBufferProperties::setDefault() {
	((ChainedStructOut*)&chain)->setDefault();
	((YCbCrVkDescriptor*)&yCbCrInfo)->setDefault();
	chain.sType = SType::SharedTextureMemoryAHardwareBufferProperties;
}


// Methods of SharedTextureMemoryDmaBufDescriptor
void SharedTextureMemoryDmaBufDescriptor::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	((Extent3D*)&size)->setDefault();
	chain.sType = SType::SharedTextureMemoryDmaBufDescriptor;
}


// Methods of SharedTextureMemoryProperties
void SharedTextureMemoryProperties::setDefault() {
	format = TextureFormat::Undefined;
	((Extent3D*)&size)->setDefault();
}


// Methods of SupportedLimits
void SupportedLimits::setDefault() {
	((Limits*)&limits)->setDefault();
}


// Methods of TextureDescriptor
void TextureDescriptor::setDefault() {
	dimension = TextureDimension::_2D;
	format = TextureFormat::Undefined;
	mipLevelCount = 1;
	sampleCount = 1;
	((Extent3D*)&size)->setDefault();
}


// Methods of VertexBufferLayout
void VertexBufferLayout::setDefault() {
	stepMode = VertexStepMode::Vertex;
}


// Methods of BindGroupLayoutDescriptor
void BindGroupLayoutDescriptor::setDefault() {
}


// Methods of ColorTargetState
void ColorTargetState::setDefault() {
	format = TextureFormat::Undefined;
}


// Methods of ComputePipelineDescriptor
void ComputePipelineDescriptor::setDefault() {
	((ProgrammableStageDescriptor*)&compute)->setDefault();
}


// Methods of DeviceDescriptor
void DeviceDescriptor::setDefault() {
	((QueueDescriptor*)&defaultQueue)->setDefault();
	((DeviceLostCallbackInfo*)&deviceLostCallbackInfo)->setDefault();
	((UncapturedErrorCallbackInfo*)&uncapturedErrorCallbackInfo)->setDefault();
	((DeviceLostCallbackInfo2*)&deviceLostCallbackInfo2)->setDefault();
	((UncapturedErrorCallbackInfo2*)&uncapturedErrorCallbackInfo2)->setDefault();
}


// Methods of RenderPassDescriptor
void RenderPassDescriptor::setDefault() {
}


// Methods of RenderPassPixelLocalStorage
void RenderPassPixelLocalStorage::setDefault() {
	((ChainedStruct*)&chain)->setDefault();
	chain.sType = SType::RenderPassPixelLocalStorage;
}


// Methods of VertexState
void VertexState::setDefault() {
}


// Methods of FragmentState
void FragmentState::setDefault() {
}


// Methods of RenderPipelineDescriptor
void RenderPipelineDescriptor::setDefault() {
	((VertexState*)&vertex)->setDefault();
	((PrimitiveState*)&primitive)->setDefault();
	((MultisampleState*)&multisample)->setDefault();
}


// Methods of Adapter
Device Adapter::createDevice(const DeviceDescriptor& descriptor) {
	return wgpuAdapterCreateDevice(m_raw, &descriptor);
}
Device Adapter::createDevice() {
	return wgpuAdapterCreateDevice(m_raw, nullptr);
}
size_t Adapter::enumerateFeatures(FeatureName * features) {
	return wgpuAdapterEnumerateFeatures(m_raw, reinterpret_cast<WGPUFeatureName *>(features));
}
Status Adapter::getFormatCapabilities(TextureFormat format, FormatCapabilities * capabilities) {
	return static_cast<Status>(wgpuAdapterGetFormatCapabilities(m_raw, static_cast<WGPUTextureFormat>(format), capabilities));
}
Status Adapter::getInfo(AdapterInfo * info) {
	return static_cast<Status>(wgpuAdapterGetInfo(m_raw, info));
}
Instance Adapter::getInstance() {
	return wgpuAdapterGetInstance(m_raw);
}
Status Adapter::getLimits(SupportedLimits * limits) {
	return static_cast<Status>(wgpuAdapterGetLimits(m_raw, limits));
}
Bool Adapter::hasFeature(FeatureName feature) {
	return wgpuAdapterHasFeature(m_raw, static_cast<WGPUFeatureName>(feature));
}
std::unique_ptr<RequestDeviceCallback> Adapter::requestDevice(const DeviceDescriptor& descriptor, RequestDeviceCallback&& callback) {
	auto handle = std::make_unique<RequestDeviceCallback>(callback);
	static auto cCallback = [](WGPURequestDeviceStatus status, WGPUDevice device, char const * message, void * userdata) -> void {
		RequestDeviceCallback& callback = *reinterpret_cast<RequestDeviceCallback*>(userdata);
		callback(static_cast<RequestDeviceStatus>(status), device, message);
	};
	wgpuAdapterRequestDevice(m_raw, &descriptor, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Adapter::requestDevice2(const DeviceDescriptor& options, RequestDeviceCallbackInfo2 callbackInfo) {
	return wgpuAdapterRequestDevice2(m_raw, &options, callbackInfo);
}
Future Adapter::requestDeviceF(const DeviceDescriptor& options, RequestDeviceCallbackInfo callbackInfo) {
	return wgpuAdapterRequestDeviceF(m_raw, &options, callbackInfo);
}
void Adapter::addRef() {
	return wgpuAdapterAddRef(m_raw);
}
void Adapter::release() {
	return wgpuAdapterRelease(m_raw);
}


// Methods of BindGroup
void BindGroup::setLabel(char const * label) {
	return wgpuBindGroupSetLabel(m_raw, label);
}
void BindGroup::setLabel2(StringView label) {
	return wgpuBindGroupSetLabel2(m_raw, label);
}
void BindGroup::addRef() {
	return wgpuBindGroupAddRef(m_raw);
}
void BindGroup::release() {
	return wgpuBindGroupRelease(m_raw);
}


// Methods of BindGroupLayout
void BindGroupLayout::setLabel(char const * label) {
	return wgpuBindGroupLayoutSetLabel(m_raw, label);
}
void BindGroupLayout::setLabel2(StringView label) {
	return wgpuBindGroupLayoutSetLabel2(m_raw, label);
}
void BindGroupLayout::addRef() {
	return wgpuBindGroupLayoutAddRef(m_raw);
}
void BindGroupLayout::release() {
	return wgpuBindGroupLayoutRelease(m_raw);
}


// Methods of Buffer
void Buffer::destroy() {
	return wgpuBufferDestroy(m_raw);
}
void const * Buffer::getConstMappedRange(size_t offset, size_t size) {
	return wgpuBufferGetConstMappedRange(m_raw, offset, size);
}
BufferMapState Buffer::getMapState() {
	return static_cast<BufferMapState>(wgpuBufferGetMapState(m_raw));
}
void * Buffer::getMappedRange(size_t offset, size_t size) {
	return wgpuBufferGetMappedRange(m_raw, offset, size);
}
uint64_t Buffer::getSize() {
	return wgpuBufferGetSize(m_raw);
}
BufferUsage Buffer::getUsage() {
	return static_cast<BufferUsage>(wgpuBufferGetUsage(m_raw));
}
std::unique_ptr<BufferMapCallback> Buffer::mapAsync(MapMode mode, size_t offset, size_t size, BufferMapCallback&& callback) {
	auto handle = std::make_unique<BufferMapCallback>(callback);
	static auto cCallback = [](WGPUBufferMapAsyncStatus status, void * userdata) -> void {
		BufferMapCallback& callback = *reinterpret_cast<BufferMapCallback*>(userdata);
		callback(static_cast<BufferMapAsyncStatus>(status));
	};
	wgpuBufferMapAsync(m_raw, static_cast<WGPUMapMode>(mode), offset, size, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Buffer::mapAsync2(MapMode mode, size_t offset, size_t size, BufferMapCallbackInfo2 callbackInfo) {
	return wgpuBufferMapAsync2(m_raw, static_cast<WGPUMapMode>(mode), offset, size, callbackInfo);
}
Future Buffer::mapAsyncF(MapMode mode, size_t offset, size_t size, BufferMapCallbackInfo callbackInfo) {
	return wgpuBufferMapAsyncF(m_raw, static_cast<WGPUMapMode>(mode), offset, size, callbackInfo);
}
void Buffer::setLabel(char const * label) {
	return wgpuBufferSetLabel(m_raw, label);
}
void Buffer::setLabel2(StringView label) {
	return wgpuBufferSetLabel2(m_raw, label);
}
void Buffer::unmap() {
	return wgpuBufferUnmap(m_raw);
}
void Buffer::addRef() {
	return wgpuBufferAddRef(m_raw);
}
void Buffer::release() {
	return wgpuBufferRelease(m_raw);
}


// Methods of CommandBuffer
void CommandBuffer::setLabel(char const * label) {
	return wgpuCommandBufferSetLabel(m_raw, label);
}
void CommandBuffer::setLabel2(StringView label) {
	return wgpuCommandBufferSetLabel2(m_raw, label);
}
void CommandBuffer::addRef() {
	return wgpuCommandBufferAddRef(m_raw);
}
void CommandBuffer::release() {
	return wgpuCommandBufferRelease(m_raw);
}


// Methods of CommandEncoder
ComputePassEncoder CommandEncoder::beginComputePass(const ComputePassDescriptor& descriptor) {
	return wgpuCommandEncoderBeginComputePass(m_raw, &descriptor);
}
ComputePassEncoder CommandEncoder::beginComputePass() {
	return wgpuCommandEncoderBeginComputePass(m_raw, nullptr);
}
RenderPassEncoder CommandEncoder::beginRenderPass(const RenderPassDescriptor& descriptor) {
	return wgpuCommandEncoderBeginRenderPass(m_raw, &descriptor);
}
void CommandEncoder::clearBuffer(Buffer buffer, uint64_t offset, uint64_t size) {
	return wgpuCommandEncoderClearBuffer(m_raw, buffer, offset, size);
}
void CommandEncoder::copyBufferToBuffer(Buffer source, uint64_t sourceOffset, Buffer destination, uint64_t destinationOffset, uint64_t size) {
	return wgpuCommandEncoderCopyBufferToBuffer(m_raw, source, sourceOffset, destination, destinationOffset, size);
}
void CommandEncoder::copyBufferToTexture(const ImageCopyBuffer& source, const ImageCopyTexture& destination, const Extent3D& copySize) {
	return wgpuCommandEncoderCopyBufferToTexture(m_raw, &source, &destination, &copySize);
}
void CommandEncoder::copyTextureToBuffer(const ImageCopyTexture& source, const ImageCopyBuffer& destination, const Extent3D& copySize) {
	return wgpuCommandEncoderCopyTextureToBuffer(m_raw, &source, &destination, &copySize);
}
void CommandEncoder::copyTextureToTexture(const ImageCopyTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize) {
	return wgpuCommandEncoderCopyTextureToTexture(m_raw, &source, &destination, &copySize);
}
CommandBuffer CommandEncoder::finish(const CommandBufferDescriptor& descriptor) {
	return wgpuCommandEncoderFinish(m_raw, &descriptor);
}
CommandBuffer CommandEncoder::finish() {
	return wgpuCommandEncoderFinish(m_raw, nullptr);
}
void CommandEncoder::injectValidationError(char const * message) {
	return wgpuCommandEncoderInjectValidationError(m_raw, message);
}
void CommandEncoder::injectValidationError2(StringView message) {
	return wgpuCommandEncoderInjectValidationError2(m_raw, message);
}
void CommandEncoder::insertDebugMarker(char const * markerLabel) {
	return wgpuCommandEncoderInsertDebugMarker(m_raw, markerLabel);
}
void CommandEncoder::insertDebugMarker2(StringView markerLabel) {
	return wgpuCommandEncoderInsertDebugMarker2(m_raw, markerLabel);
}
void CommandEncoder::popDebugGroup() {
	return wgpuCommandEncoderPopDebugGroup(m_raw);
}
void CommandEncoder::pushDebugGroup(char const * groupLabel) {
	return wgpuCommandEncoderPushDebugGroup(m_raw, groupLabel);
}
void CommandEncoder::pushDebugGroup2(StringView groupLabel) {
	return wgpuCommandEncoderPushDebugGroup2(m_raw, groupLabel);
}
void CommandEncoder::resolveQuerySet(QuerySet querySet, uint32_t firstQuery, uint32_t queryCount, Buffer destination, uint64_t destinationOffset) {
	return wgpuCommandEncoderResolveQuerySet(m_raw, querySet, firstQuery, queryCount, destination, destinationOffset);
}
void CommandEncoder::setLabel(char const * label) {
	return wgpuCommandEncoderSetLabel(m_raw, label);
}
void CommandEncoder::setLabel2(StringView label) {
	return wgpuCommandEncoderSetLabel2(m_raw, label);
}
void CommandEncoder::writeBuffer(Buffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {
	return wgpuCommandEncoderWriteBuffer(m_raw, buffer, bufferOffset, data, size);
}
void CommandEncoder::writeTimestamp(QuerySet querySet, uint32_t queryIndex) {
	return wgpuCommandEncoderWriteTimestamp(m_raw, querySet, queryIndex);
}
void CommandEncoder::addRef() {
	return wgpuCommandEncoderAddRef(m_raw);
}
void CommandEncoder::release() {
	return wgpuCommandEncoderRelease(m_raw);
}


// Methods of ComputePassEncoder
void ComputePassEncoder::dispatchWorkgroups(uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {
	return wgpuComputePassEncoderDispatchWorkgroups(m_raw, workgroupCountX, workgroupCountY, workgroupCountZ);
}
void ComputePassEncoder::dispatchWorkgroupsIndirect(Buffer indirectBuffer, uint64_t indirectOffset) {
	return wgpuComputePassEncoderDispatchWorkgroupsIndirect(m_raw, indirectBuffer, indirectOffset);
}
void ComputePassEncoder::end() {
	return wgpuComputePassEncoderEnd(m_raw);
}
void ComputePassEncoder::insertDebugMarker(char const * markerLabel) {
	return wgpuComputePassEncoderInsertDebugMarker(m_raw, markerLabel);
}
void ComputePassEncoder::insertDebugMarker2(StringView markerLabel) {
	return wgpuComputePassEncoderInsertDebugMarker2(m_raw, markerLabel);
}
void ComputePassEncoder::popDebugGroup() {
	return wgpuComputePassEncoderPopDebugGroup(m_raw);
}
void ComputePassEncoder::pushDebugGroup(char const * groupLabel) {
	return wgpuComputePassEncoderPushDebugGroup(m_raw, groupLabel);
}
void ComputePassEncoder::pushDebugGroup2(StringView groupLabel) {
	return wgpuComputePassEncoderPushDebugGroup2(m_raw, groupLabel);
}
void ComputePassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	return wgpuComputePassEncoderSetBindGroup(m_raw, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
}
void ComputePassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets) {
	return wgpuComputePassEncoderSetBindGroup(m_raw, groupIndex, group, static_cast<size_t>(dynamicOffsets.size()), dynamicOffsets.data());
}
void ComputePassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets) {
	return wgpuComputePassEncoderSetBindGroup(m_raw, groupIndex, group, 1, &dynamicOffsets);
}
void ComputePassEncoder::setLabel(char const * label) {
	return wgpuComputePassEncoderSetLabel(m_raw, label);
}
void ComputePassEncoder::setLabel2(StringView label) {
	return wgpuComputePassEncoderSetLabel2(m_raw, label);
}
void ComputePassEncoder::setPipeline(ComputePipeline pipeline) {
	return wgpuComputePassEncoderSetPipeline(m_raw, pipeline);
}
void ComputePassEncoder::writeTimestamp(QuerySet querySet, uint32_t queryIndex) {
	return wgpuComputePassEncoderWriteTimestamp(m_raw, querySet, queryIndex);
}
void ComputePassEncoder::addRef() {
	return wgpuComputePassEncoderAddRef(m_raw);
}
void ComputePassEncoder::release() {
	return wgpuComputePassEncoderRelease(m_raw);
}


// Methods of ComputePipeline
BindGroupLayout ComputePipeline::getBindGroupLayout(uint32_t groupIndex) {
	return wgpuComputePipelineGetBindGroupLayout(m_raw, groupIndex);
}
void ComputePipeline::setLabel(char const * label) {
	return wgpuComputePipelineSetLabel(m_raw, label);
}
void ComputePipeline::setLabel2(StringView label) {
	return wgpuComputePipelineSetLabel2(m_raw, label);
}
void ComputePipeline::addRef() {
	return wgpuComputePipelineAddRef(m_raw);
}
void ComputePipeline::release() {
	return wgpuComputePipelineRelease(m_raw);
}


// Methods of Device
BindGroup Device::createBindGroup(const BindGroupDescriptor& descriptor) {
	return wgpuDeviceCreateBindGroup(m_raw, &descriptor);
}
BindGroupLayout Device::createBindGroupLayout(const BindGroupLayoutDescriptor& descriptor) {
	return wgpuDeviceCreateBindGroupLayout(m_raw, &descriptor);
}
Buffer Device::createBuffer(const BufferDescriptor& descriptor) {
	return wgpuDeviceCreateBuffer(m_raw, &descriptor);
}
CommandEncoder Device::createCommandEncoder(const CommandEncoderDescriptor& descriptor) {
	return wgpuDeviceCreateCommandEncoder(m_raw, &descriptor);
}
CommandEncoder Device::createCommandEncoder() {
	return wgpuDeviceCreateCommandEncoder(m_raw, nullptr);
}
ComputePipeline Device::createComputePipeline(const ComputePipelineDescriptor& descriptor) {
	return wgpuDeviceCreateComputePipeline(m_raw, &descriptor);
}
std::unique_ptr<CreateComputePipelineAsyncCallback> Device::createComputePipelineAsync(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallback&& callback) {
	auto handle = std::make_unique<CreateComputePipelineAsyncCallback>(callback);
	static auto cCallback = [](WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, char const * message, void * userdata) -> void {
		CreateComputePipelineAsyncCallback& callback = *reinterpret_cast<CreateComputePipelineAsyncCallback*>(userdata);
		callback(static_cast<CreatePipelineAsyncStatus>(status), pipeline, message);
	};
	wgpuDeviceCreateComputePipelineAsync(m_raw, &descriptor, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Device::createComputePipelineAsync2(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallbackInfo2 callbackInfo) {
	return wgpuDeviceCreateComputePipelineAsync2(m_raw, &descriptor, callbackInfo);
}
Future Device::createComputePipelineAsyncF(const ComputePipelineDescriptor& descriptor, CreateComputePipelineAsyncCallbackInfo callbackInfo) {
	return wgpuDeviceCreateComputePipelineAsyncF(m_raw, &descriptor, callbackInfo);
}
Buffer Device::createErrorBuffer(const BufferDescriptor& descriptor) {
	return wgpuDeviceCreateErrorBuffer(m_raw, &descriptor);
}
ExternalTexture Device::createErrorExternalTexture() {
	return wgpuDeviceCreateErrorExternalTexture(m_raw);
}
ShaderModule Device::createErrorShaderModule(const ShaderModuleDescriptor& descriptor, char const * errorMessage) {
	return wgpuDeviceCreateErrorShaderModule(m_raw, &descriptor, errorMessage);
}
ShaderModule Device::createErrorShaderModule2(const ShaderModuleDescriptor& descriptor, StringView errorMessage) {
	return wgpuDeviceCreateErrorShaderModule2(m_raw, &descriptor, errorMessage);
}
Texture Device::createErrorTexture(const TextureDescriptor& descriptor) {
	return wgpuDeviceCreateErrorTexture(m_raw, &descriptor);
}
ExternalTexture Device::createExternalTexture(const ExternalTextureDescriptor& externalTextureDescriptor) {
	return wgpuDeviceCreateExternalTexture(m_raw, &externalTextureDescriptor);
}
PipelineLayout Device::createPipelineLayout(const PipelineLayoutDescriptor& descriptor) {
	return wgpuDeviceCreatePipelineLayout(m_raw, &descriptor);
}
QuerySet Device::createQuerySet(const QuerySetDescriptor& descriptor) {
	return wgpuDeviceCreateQuerySet(m_raw, &descriptor);
}
RenderBundleEncoder Device::createRenderBundleEncoder(const RenderBundleEncoderDescriptor& descriptor) {
	return wgpuDeviceCreateRenderBundleEncoder(m_raw, &descriptor);
}
RenderPipeline Device::createRenderPipeline(const RenderPipelineDescriptor& descriptor) {
	return wgpuDeviceCreateRenderPipeline(m_raw, &descriptor);
}
std::unique_ptr<CreateRenderPipelineAsyncCallback> Device::createRenderPipelineAsync(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallback&& callback) {
	auto handle = std::make_unique<CreateRenderPipelineAsyncCallback>(callback);
	static auto cCallback = [](WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, char const * message, void * userdata) -> void {
		CreateRenderPipelineAsyncCallback& callback = *reinterpret_cast<CreateRenderPipelineAsyncCallback*>(userdata);
		callback(static_cast<CreatePipelineAsyncStatus>(status), pipeline, message);
	};
	wgpuDeviceCreateRenderPipelineAsync(m_raw, &descriptor, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Device::createRenderPipelineAsync2(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallbackInfo2 callbackInfo) {
	return wgpuDeviceCreateRenderPipelineAsync2(m_raw, &descriptor, callbackInfo);
}
Future Device::createRenderPipelineAsyncF(const RenderPipelineDescriptor& descriptor, CreateRenderPipelineAsyncCallbackInfo callbackInfo) {
	return wgpuDeviceCreateRenderPipelineAsyncF(m_raw, &descriptor, callbackInfo);
}
Sampler Device::createSampler(const SamplerDescriptor& descriptor) {
	return wgpuDeviceCreateSampler(m_raw, &descriptor);
}
Sampler Device::createSampler() {
	return wgpuDeviceCreateSampler(m_raw, nullptr);
}
ShaderModule Device::createShaderModule(const ShaderModuleDescriptor& descriptor) {
	return wgpuDeviceCreateShaderModule(m_raw, &descriptor);
}
SwapChain Device::createSwapChain(Surface surface, const SwapChainDescriptor& descriptor) {
	return wgpuDeviceCreateSwapChain(m_raw, surface, &descriptor);
}
Texture Device::createTexture(const TextureDescriptor& descriptor) {
	return wgpuDeviceCreateTexture(m_raw, &descriptor);
}
void Device::destroy() {
	return wgpuDeviceDestroy(m_raw);
}
size_t Device::enumerateFeatures(FeatureName * features) {
	return wgpuDeviceEnumerateFeatures(m_raw, reinterpret_cast<WGPUFeatureName *>(features));
}
void Device::forceLoss(DeviceLostReason type, char const * message) {
	return wgpuDeviceForceLoss(m_raw, static_cast<WGPUDeviceLostReason>(type), message);
}
void Device::forceLoss2(DeviceLostReason type, StringView message) {
	return wgpuDeviceForceLoss2(m_raw, static_cast<WGPUDeviceLostReason>(type), message);
}
Status Device::getAHardwareBufferProperties(void * handle, AHardwareBufferProperties * properties) {
	return static_cast<Status>(wgpuDeviceGetAHardwareBufferProperties(m_raw, handle, properties));
}
Adapter Device::getAdapter() {
	return wgpuDeviceGetAdapter(m_raw);
}
Status Device::getLimits(SupportedLimits * limits) {
	return static_cast<Status>(wgpuDeviceGetLimits(m_raw, limits));
}
Queue Device::getQueue() {
	return wgpuDeviceGetQueue(m_raw);
}
TextureUsage Device::getSupportedSurfaceUsage(Surface surface) {
	return static_cast<TextureUsage>(wgpuDeviceGetSupportedSurfaceUsage(m_raw, surface));
}
Bool Device::hasFeature(FeatureName feature) {
	return wgpuDeviceHasFeature(m_raw, static_cast<WGPUFeatureName>(feature));
}
SharedBufferMemory Device::importSharedBufferMemory(const SharedBufferMemoryDescriptor& descriptor) {
	return wgpuDeviceImportSharedBufferMemory(m_raw, &descriptor);
}
SharedFence Device::importSharedFence(const SharedFenceDescriptor& descriptor) {
	return wgpuDeviceImportSharedFence(m_raw, &descriptor);
}
SharedTextureMemory Device::importSharedTextureMemory(const SharedTextureMemoryDescriptor& descriptor) {
	return wgpuDeviceImportSharedTextureMemory(m_raw, &descriptor);
}
void Device::injectError(ErrorType type, char const * message) {
	return wgpuDeviceInjectError(m_raw, static_cast<WGPUErrorType>(type), message);
}
void Device::injectError2(ErrorType type, StringView message) {
	return wgpuDeviceInjectError2(m_raw, static_cast<WGPUErrorType>(type), message);
}
std::unique_ptr<ErrorCallback> Device::popErrorScope(ErrorCallback&& oldCallback) {
	auto handle = std::make_unique<ErrorCallback>(oldCallback);
	static auto cCallback = [](WGPUErrorType type, char const * message, void * userdata) -> void {
		ErrorCallback& callback = *reinterpret_cast<ErrorCallback*>(userdata);
		callback(static_cast<ErrorType>(type), message);
	};
	wgpuDevicePopErrorScope(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Device::popErrorScope2(PopErrorScopeCallbackInfo2 callbackInfo) {
	return wgpuDevicePopErrorScope2(m_raw, callbackInfo);
}
Future Device::popErrorScopeF(PopErrorScopeCallbackInfo callbackInfo) {
	return wgpuDevicePopErrorScopeF(m_raw, callbackInfo);
}
void Device::pushErrorScope(ErrorFilter filter) {
	return wgpuDevicePushErrorScope(m_raw, static_cast<WGPUErrorFilter>(filter));
}
std::unique_ptr<DeviceLostCallback> Device::setDeviceLostCallback(DeviceLostCallback&& callback) {
	auto handle = std::make_unique<DeviceLostCallback>(callback);
	static auto cCallback = [](WGPUDeviceLostReason reason, char const * message, void * userdata) -> void {
		DeviceLostCallback& callback = *reinterpret_cast<DeviceLostCallback*>(userdata);
		callback(static_cast<DeviceLostReason>(reason), message);
	};
	wgpuDeviceSetDeviceLostCallback(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
void Device::setLabel(char const * label) {
	return wgpuDeviceSetLabel(m_raw, label);
}
void Device::setLabel2(StringView label) {
	return wgpuDeviceSetLabel2(m_raw, label);
}
std::unique_ptr<LoggingCallback> Device::setLoggingCallback(LoggingCallback&& callback) {
	auto handle = std::make_unique<LoggingCallback>(callback);
	static auto cCallback = [](WGPULoggingType type, char const * message, void * userdata) -> void {
		LoggingCallback& callback = *reinterpret_cast<LoggingCallback*>(userdata);
		callback(static_cast<LoggingType>(type), message);
	};
	wgpuDeviceSetLoggingCallback(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
std::unique_ptr<ErrorCallback> Device::setUncapturedErrorCallback(ErrorCallback&& callback) {
	auto handle = std::make_unique<ErrorCallback>(callback);
	static auto cCallback = [](WGPUErrorType type, char const * message, void * userdata) -> void {
		ErrorCallback& callback = *reinterpret_cast<ErrorCallback*>(userdata);
		callback(static_cast<ErrorType>(type), message);
	};
	wgpuDeviceSetUncapturedErrorCallback(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
void Device::tick() {
	return wgpuDeviceTick(m_raw);
}
void Device::validateTextureDescriptor(const TextureDescriptor& descriptor) {
	return wgpuDeviceValidateTextureDescriptor(m_raw, &descriptor);
}
void Device::addRef() {
	return wgpuDeviceAddRef(m_raw);
}
void Device::release() {
	return wgpuDeviceRelease(m_raw);
}


// Methods of ExternalTexture
void ExternalTexture::destroy() {
	return wgpuExternalTextureDestroy(m_raw);
}
void ExternalTexture::expire() {
	return wgpuExternalTextureExpire(m_raw);
}
void ExternalTexture::refresh() {
	return wgpuExternalTextureRefresh(m_raw);
}
void ExternalTexture::setLabel(char const * label) {
	return wgpuExternalTextureSetLabel(m_raw, label);
}
void ExternalTexture::setLabel2(StringView label) {
	return wgpuExternalTextureSetLabel2(m_raw, label);
}
void ExternalTexture::addRef() {
	return wgpuExternalTextureAddRef(m_raw);
}
void ExternalTexture::release() {
	return wgpuExternalTextureRelease(m_raw);
}


// Methods of Instance
Surface Instance::createSurface(const SurfaceDescriptor& descriptor) {
	return wgpuInstanceCreateSurface(m_raw, &descriptor);
}
size_t Instance::enumerateWGSLLanguageFeatures(WGSLFeatureName * features) {
	return wgpuInstanceEnumerateWGSLLanguageFeatures(m_raw, reinterpret_cast<WGPUWGSLFeatureName *>(features));
}
Bool Instance::hasWGSLLanguageFeature(WGSLFeatureName feature) {
	return wgpuInstanceHasWGSLLanguageFeature(m_raw, static_cast<WGPUWGSLFeatureName>(feature));
}
void Instance::processEvents() {
	return wgpuInstanceProcessEvents(m_raw);
}
std::unique_ptr<RequestAdapterCallback> Instance::requestAdapter(const RequestAdapterOptions& options, RequestAdapterCallback&& callback) {
	auto handle = std::make_unique<RequestAdapterCallback>(callback);
	static auto cCallback = [](WGPURequestAdapterStatus status, WGPUAdapter adapter, char const * message, void * userdata) -> void {
		RequestAdapterCallback& callback = *reinterpret_cast<RequestAdapterCallback*>(userdata);
		callback(static_cast<RequestAdapterStatus>(status), adapter, message);
	};
	wgpuInstanceRequestAdapter(m_raw, &options, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Instance::requestAdapter2(const RequestAdapterOptions& options, RequestAdapterCallbackInfo2 callbackInfo) {
	return wgpuInstanceRequestAdapter2(m_raw, &options, callbackInfo);
}
Future Instance::requestAdapterF(const RequestAdapterOptions& options, RequestAdapterCallbackInfo callbackInfo) {
	return wgpuInstanceRequestAdapterF(m_raw, &options, callbackInfo);
}
WaitStatus Instance::waitAny(size_t futureCount, FutureWaitInfo * futures, uint64_t timeoutNS) {
	return static_cast<WaitStatus>(wgpuInstanceWaitAny(m_raw, futureCount, futures, timeoutNS));
}
void Instance::addRef() {
	return wgpuInstanceAddRef(m_raw);
}
void Instance::release() {
	return wgpuInstanceRelease(m_raw);
}


// Methods of PipelineLayout
void PipelineLayout::setLabel(char const * label) {
	return wgpuPipelineLayoutSetLabel(m_raw, label);
}
void PipelineLayout::setLabel2(StringView label) {
	return wgpuPipelineLayoutSetLabel2(m_raw, label);
}
void PipelineLayout::addRef() {
	return wgpuPipelineLayoutAddRef(m_raw);
}
void PipelineLayout::release() {
	return wgpuPipelineLayoutRelease(m_raw);
}


// Methods of QuerySet
void QuerySet::destroy() {
	return wgpuQuerySetDestroy(m_raw);
}
uint32_t QuerySet::getCount() {
	return wgpuQuerySetGetCount(m_raw);
}
QueryType QuerySet::getType() {
	return static_cast<QueryType>(wgpuQuerySetGetType(m_raw));
}
void QuerySet::setLabel(char const * label) {
	return wgpuQuerySetSetLabel(m_raw, label);
}
void QuerySet::setLabel2(StringView label) {
	return wgpuQuerySetSetLabel2(m_raw, label);
}
void QuerySet::addRef() {
	return wgpuQuerySetAddRef(m_raw);
}
void QuerySet::release() {
	return wgpuQuerySetRelease(m_raw);
}


// Methods of Queue
void Queue::copyExternalTextureForBrowser(const ImageCopyExternalTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize, const CopyTextureForBrowserOptions& options) {
	return wgpuQueueCopyExternalTextureForBrowser(m_raw, &source, &destination, &copySize, &options);
}
void Queue::copyTextureForBrowser(const ImageCopyTexture& source, const ImageCopyTexture& destination, const Extent3D& copySize, const CopyTextureForBrowserOptions& options) {
	return wgpuQueueCopyTextureForBrowser(m_raw, &source, &destination, &copySize, &options);
}
std::unique_ptr<QueueWorkDoneCallback> Queue::onSubmittedWorkDone(QueueWorkDoneCallback&& callback) {
	auto handle = std::make_unique<QueueWorkDoneCallback>(callback);
	static auto cCallback = [](WGPUQueueWorkDoneStatus status, void * userdata) -> void {
		QueueWorkDoneCallback& callback = *reinterpret_cast<QueueWorkDoneCallback*>(userdata);
		callback(static_cast<QueueWorkDoneStatus>(status));
	};
	wgpuQueueOnSubmittedWorkDone(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future Queue::onSubmittedWorkDone2(QueueWorkDoneCallbackInfo2 callbackInfo) {
	return wgpuQueueOnSubmittedWorkDone2(m_raw, callbackInfo);
}
Future Queue::onSubmittedWorkDoneF(QueueWorkDoneCallbackInfo callbackInfo) {
	return wgpuQueueOnSubmittedWorkDoneF(m_raw, callbackInfo);
}
void Queue::setLabel(char const * label) {
	return wgpuQueueSetLabel(m_raw, label);
}
void Queue::setLabel2(StringView label) {
	return wgpuQueueSetLabel2(m_raw, label);
}
void Queue::submit(size_t commandCount, CommandBuffer const * commands) {
	return wgpuQueueSubmit(m_raw, commandCount, reinterpret_cast<WGPUCommandBuffer const *>(commands));
}
void Queue::submit(const std::vector<WGPUCommandBuffer>& commands) {
	return wgpuQueueSubmit(m_raw, static_cast<size_t>(commands.size()), commands.data());
}
void Queue::submit(const WGPUCommandBuffer& commands) {
	return wgpuQueueSubmit(m_raw, 1, &commands);
}
void Queue::writeBuffer(Buffer buffer, uint64_t bufferOffset, void const * data, size_t size) {
	return wgpuQueueWriteBuffer(m_raw, buffer, bufferOffset, data, size);
}
void Queue::writeTexture(const ImageCopyTexture& destination, void const * data, size_t dataSize, const TextureDataLayout& dataLayout, const Extent3D& writeSize) {
	return wgpuQueueWriteTexture(m_raw, &destination, data, dataSize, &dataLayout, &writeSize);
}
void Queue::addRef() {
	return wgpuQueueAddRef(m_raw);
}
void Queue::release() {
	return wgpuQueueRelease(m_raw);
}


// Methods of RenderBundle
void RenderBundle::setLabel(char const * label) {
	return wgpuRenderBundleSetLabel(m_raw, label);
}
void RenderBundle::setLabel2(StringView label) {
	return wgpuRenderBundleSetLabel2(m_raw, label);
}
void RenderBundle::addRef() {
	return wgpuRenderBundleAddRef(m_raw);
}
void RenderBundle::release() {
	return wgpuRenderBundleRelease(m_raw);
}


// Methods of RenderBundleEncoder
void RenderBundleEncoder::draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	return wgpuRenderBundleEncoderDraw(m_raw, vertexCount, instanceCount, firstVertex, firstInstance);
}
void RenderBundleEncoder::drawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {
	return wgpuRenderBundleEncoderDrawIndexed(m_raw, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
}
void RenderBundleEncoder::drawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset) {
	return wgpuRenderBundleEncoderDrawIndexedIndirect(m_raw, indirectBuffer, indirectOffset);
}
void RenderBundleEncoder::drawIndirect(Buffer indirectBuffer, uint64_t indirectOffset) {
	return wgpuRenderBundleEncoderDrawIndirect(m_raw, indirectBuffer, indirectOffset);
}
RenderBundle RenderBundleEncoder::finish(const RenderBundleDescriptor& descriptor) {
	return wgpuRenderBundleEncoderFinish(m_raw, &descriptor);
}
RenderBundle RenderBundleEncoder::finish() {
	return wgpuRenderBundleEncoderFinish(m_raw, nullptr);
}
void RenderBundleEncoder::insertDebugMarker(char const * markerLabel) {
	return wgpuRenderBundleEncoderInsertDebugMarker(m_raw, markerLabel);
}
void RenderBundleEncoder::insertDebugMarker2(StringView markerLabel) {
	return wgpuRenderBundleEncoderInsertDebugMarker2(m_raw, markerLabel);
}
void RenderBundleEncoder::popDebugGroup() {
	return wgpuRenderBundleEncoderPopDebugGroup(m_raw);
}
void RenderBundleEncoder::pushDebugGroup(char const * groupLabel) {
	return wgpuRenderBundleEncoderPushDebugGroup(m_raw, groupLabel);
}
void RenderBundleEncoder::pushDebugGroup2(StringView groupLabel) {
	return wgpuRenderBundleEncoderPushDebugGroup2(m_raw, groupLabel);
}
void RenderBundleEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	return wgpuRenderBundleEncoderSetBindGroup(m_raw, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
}
void RenderBundleEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets) {
	return wgpuRenderBundleEncoderSetBindGroup(m_raw, groupIndex, group, static_cast<size_t>(dynamicOffsets.size()), dynamicOffsets.data());
}
void RenderBundleEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets) {
	return wgpuRenderBundleEncoderSetBindGroup(m_raw, groupIndex, group, 1, &dynamicOffsets);
}
void RenderBundleEncoder::setIndexBuffer(Buffer buffer, IndexFormat format, uint64_t offset, uint64_t size) {
	return wgpuRenderBundleEncoderSetIndexBuffer(m_raw, buffer, static_cast<WGPUIndexFormat>(format), offset, size);
}
void RenderBundleEncoder::setLabel(char const * label) {
	return wgpuRenderBundleEncoderSetLabel(m_raw, label);
}
void RenderBundleEncoder::setLabel2(StringView label) {
	return wgpuRenderBundleEncoderSetLabel2(m_raw, label);
}
void RenderBundleEncoder::setPipeline(RenderPipeline pipeline) {
	return wgpuRenderBundleEncoderSetPipeline(m_raw, pipeline);
}
void RenderBundleEncoder::setVertexBuffer(uint32_t slot, Buffer buffer, uint64_t offset, uint64_t size) {
	return wgpuRenderBundleEncoderSetVertexBuffer(m_raw, slot, buffer, offset, size);
}
void RenderBundleEncoder::addRef() {
	return wgpuRenderBundleEncoderAddRef(m_raw);
}
void RenderBundleEncoder::release() {
	return wgpuRenderBundleEncoderRelease(m_raw);
}


// Methods of RenderPassEncoder
void RenderPassEncoder::beginOcclusionQuery(uint32_t queryIndex) {
	return wgpuRenderPassEncoderBeginOcclusionQuery(m_raw, queryIndex);
}
void RenderPassEncoder::draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	return wgpuRenderPassEncoderDraw(m_raw, vertexCount, instanceCount, firstVertex, firstInstance);
}
void RenderPassEncoder::drawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {
	return wgpuRenderPassEncoderDrawIndexed(m_raw, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
}
void RenderPassEncoder::drawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset) {
	return wgpuRenderPassEncoderDrawIndexedIndirect(m_raw, indirectBuffer, indirectOffset);
}
void RenderPassEncoder::drawIndirect(Buffer indirectBuffer, uint64_t indirectOffset) {
	return wgpuRenderPassEncoderDrawIndirect(m_raw, indirectBuffer, indirectOffset);
}
void RenderPassEncoder::end() {
	return wgpuRenderPassEncoderEnd(m_raw);
}
void RenderPassEncoder::endOcclusionQuery() {
	return wgpuRenderPassEncoderEndOcclusionQuery(m_raw);
}
void RenderPassEncoder::executeBundles(size_t bundleCount, RenderBundle const * bundles) {
	return wgpuRenderPassEncoderExecuteBundles(m_raw, bundleCount, reinterpret_cast<WGPURenderBundle const *>(bundles));
}
void RenderPassEncoder::executeBundles(const std::vector<WGPURenderBundle>& bundles) {
	return wgpuRenderPassEncoderExecuteBundles(m_raw, static_cast<size_t>(bundles.size()), bundles.data());
}
void RenderPassEncoder::executeBundles(const WGPURenderBundle& bundles) {
	return wgpuRenderPassEncoderExecuteBundles(m_raw, 1, &bundles);
}
void RenderPassEncoder::insertDebugMarker(char const * markerLabel) {
	return wgpuRenderPassEncoderInsertDebugMarker(m_raw, markerLabel);
}
void RenderPassEncoder::insertDebugMarker2(StringView markerLabel) {
	return wgpuRenderPassEncoderInsertDebugMarker2(m_raw, markerLabel);
}
void RenderPassEncoder::multiDrawIndexedIndirect(Buffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, Buffer drawCountBuffer, uint64_t drawCountBufferOffset) {
	return wgpuRenderPassEncoderMultiDrawIndexedIndirect(m_raw, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);
}
void RenderPassEncoder::multiDrawIndirect(Buffer indirectBuffer, uint64_t indirectOffset, uint32_t maxDrawCount, Buffer drawCountBuffer, uint64_t drawCountBufferOffset) {
	return wgpuRenderPassEncoderMultiDrawIndirect(m_raw, indirectBuffer, indirectOffset, maxDrawCount, drawCountBuffer, drawCountBufferOffset);
}
void RenderPassEncoder::pixelLocalStorageBarrier() {
	return wgpuRenderPassEncoderPixelLocalStorageBarrier(m_raw);
}
void RenderPassEncoder::popDebugGroup() {
	return wgpuRenderPassEncoderPopDebugGroup(m_raw);
}
void RenderPassEncoder::pushDebugGroup(char const * groupLabel) {
	return wgpuRenderPassEncoderPushDebugGroup(m_raw, groupLabel);
}
void RenderPassEncoder::pushDebugGroup2(StringView groupLabel) {
	return wgpuRenderPassEncoderPushDebugGroup2(m_raw, groupLabel);
}
void RenderPassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {
	return wgpuRenderPassEncoderSetBindGroup(m_raw, groupIndex, group, dynamicOffsetCount, dynamicOffsets);
}
void RenderPassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const std::vector<uint32_t>& dynamicOffsets) {
	return wgpuRenderPassEncoderSetBindGroup(m_raw, groupIndex, group, static_cast<size_t>(dynamicOffsets.size()), dynamicOffsets.data());
}
void RenderPassEncoder::setBindGroup(uint32_t groupIndex, BindGroup group, const uint32_t& dynamicOffsets) {
	return wgpuRenderPassEncoderSetBindGroup(m_raw, groupIndex, group, 1, &dynamicOffsets);
}
void RenderPassEncoder::setBlendConstant(const Color& color) {
	return wgpuRenderPassEncoderSetBlendConstant(m_raw, &color);
}
void RenderPassEncoder::setIndexBuffer(Buffer buffer, IndexFormat format, uint64_t offset, uint64_t size) {
	return wgpuRenderPassEncoderSetIndexBuffer(m_raw, buffer, static_cast<WGPUIndexFormat>(format), offset, size);
}
void RenderPassEncoder::setLabel(char const * label) {
	return wgpuRenderPassEncoderSetLabel(m_raw, label);
}
void RenderPassEncoder::setLabel2(StringView label) {
	return wgpuRenderPassEncoderSetLabel2(m_raw, label);
}
void RenderPassEncoder::setPipeline(RenderPipeline pipeline) {
	return wgpuRenderPassEncoderSetPipeline(m_raw, pipeline);
}
void RenderPassEncoder::setScissorRect(uint32_t x, uint32_t y, uint32_t width, uint32_t height) {
	return wgpuRenderPassEncoderSetScissorRect(m_raw, x, y, width, height);
}
void RenderPassEncoder::setStencilReference(uint32_t reference) {
	return wgpuRenderPassEncoderSetStencilReference(m_raw, reference);
}
void RenderPassEncoder::setVertexBuffer(uint32_t slot, Buffer buffer, uint64_t offset, uint64_t size) {
	return wgpuRenderPassEncoderSetVertexBuffer(m_raw, slot, buffer, offset, size);
}
void RenderPassEncoder::setViewport(float x, float y, float width, float height, float minDepth, float maxDepth) {
	return wgpuRenderPassEncoderSetViewport(m_raw, x, y, width, height, minDepth, maxDepth);
}
void RenderPassEncoder::writeTimestamp(QuerySet querySet, uint32_t queryIndex) {
	return wgpuRenderPassEncoderWriteTimestamp(m_raw, querySet, queryIndex);
}
void RenderPassEncoder::addRef() {
	return wgpuRenderPassEncoderAddRef(m_raw);
}
void RenderPassEncoder::release() {
	return wgpuRenderPassEncoderRelease(m_raw);
}


// Methods of RenderPipeline
BindGroupLayout RenderPipeline::getBindGroupLayout(uint32_t groupIndex) {
	return wgpuRenderPipelineGetBindGroupLayout(m_raw, groupIndex);
}
void RenderPipeline::setLabel(char const * label) {
	return wgpuRenderPipelineSetLabel(m_raw, label);
}
void RenderPipeline::setLabel2(StringView label) {
	return wgpuRenderPipelineSetLabel2(m_raw, label);
}
void RenderPipeline::addRef() {
	return wgpuRenderPipelineAddRef(m_raw);
}
void RenderPipeline::release() {
	return wgpuRenderPipelineRelease(m_raw);
}


// Methods of Sampler
void Sampler::setLabel(char const * label) {
	return wgpuSamplerSetLabel(m_raw, label);
}
void Sampler::setLabel2(StringView label) {
	return wgpuSamplerSetLabel2(m_raw, label);
}
void Sampler::addRef() {
	return wgpuSamplerAddRef(m_raw);
}
void Sampler::release() {
	return wgpuSamplerRelease(m_raw);
}


// Methods of ShaderModule
std::unique_ptr<CompilationInfoCallback> ShaderModule::getCompilationInfo(CompilationInfoCallback&& callback) {
	auto handle = std::make_unique<CompilationInfoCallback>(callback);
	static auto cCallback = [](WGPUCompilationInfoRequestStatus status, struct WGPUCompilationInfo const * compilationInfo, void * userdata) -> void {
		CompilationInfoCallback& callback = *reinterpret_cast<CompilationInfoCallback*>(userdata);
		callback(static_cast<CompilationInfoRequestStatus>(status), *reinterpret_cast<CompilationInfo const *>(compilationInfo));
	};
	wgpuShaderModuleGetCompilationInfo(m_raw, cCallback, reinterpret_cast<void*>(handle.get()));
	return handle;
}
Future ShaderModule::getCompilationInfo2(CompilationInfoCallbackInfo2 callbackInfo) {
	return wgpuShaderModuleGetCompilationInfo2(m_raw, callbackInfo);
}
Future ShaderModule::getCompilationInfoF(CompilationInfoCallbackInfo callbackInfo) {
	return wgpuShaderModuleGetCompilationInfoF(m_raw, callbackInfo);
}
void ShaderModule::setLabel(char const * label) {
	return wgpuShaderModuleSetLabel(m_raw, label);
}
void ShaderModule::setLabel2(StringView label) {
	return wgpuShaderModuleSetLabel2(m_raw, label);
}
void ShaderModule::addRef() {
	return wgpuShaderModuleAddRef(m_raw);
}
void ShaderModule::release() {
	return wgpuShaderModuleRelease(m_raw);
}


// Methods of SharedBufferMemory
Status SharedBufferMemory::beginAccess(Buffer buffer, const SharedBufferMemoryBeginAccessDescriptor& descriptor) {
	return static_cast<Status>(wgpuSharedBufferMemoryBeginAccess(m_raw, buffer, &descriptor));
}
Buffer SharedBufferMemory::createBuffer(const BufferDescriptor& descriptor) {
	return wgpuSharedBufferMemoryCreateBuffer(m_raw, &descriptor);
}
Buffer SharedBufferMemory::createBuffer() {
	return wgpuSharedBufferMemoryCreateBuffer(m_raw, nullptr);
}
Status SharedBufferMemory::endAccess(Buffer buffer, SharedBufferMemoryEndAccessState * descriptor) {
	return static_cast<Status>(wgpuSharedBufferMemoryEndAccess(m_raw, buffer, descriptor));
}
Status SharedBufferMemory::getProperties(SharedBufferMemoryProperties * properties) {
	return static_cast<Status>(wgpuSharedBufferMemoryGetProperties(m_raw, properties));
}
Bool SharedBufferMemory::isDeviceLost() {
	return wgpuSharedBufferMemoryIsDeviceLost(m_raw);
}
void SharedBufferMemory::setLabel(char const * label) {
	return wgpuSharedBufferMemorySetLabel(m_raw, label);
}
void SharedBufferMemory::setLabel2(StringView label) {
	return wgpuSharedBufferMemorySetLabel2(m_raw, label);
}
void SharedBufferMemory::addRef() {
	return wgpuSharedBufferMemoryAddRef(m_raw);
}
void SharedBufferMemory::release() {
	return wgpuSharedBufferMemoryRelease(m_raw);
}


// Methods of SharedFence
void SharedFence::exportInfo(SharedFenceExportInfo * info) {
	return wgpuSharedFenceExportInfo(m_raw, info);
}
void SharedFence::addRef() {
	return wgpuSharedFenceAddRef(m_raw);
}
void SharedFence::release() {
	return wgpuSharedFenceRelease(m_raw);
}


// Methods of SharedTextureMemory
Status SharedTextureMemory::beginAccess(Texture texture, const SharedTextureMemoryBeginAccessDescriptor& descriptor) {
	return static_cast<Status>(wgpuSharedTextureMemoryBeginAccess(m_raw, texture, &descriptor));
}
Texture SharedTextureMemory::createTexture(const TextureDescriptor& descriptor) {
	return wgpuSharedTextureMemoryCreateTexture(m_raw, &descriptor);
}
Texture SharedTextureMemory::createTexture() {
	return wgpuSharedTextureMemoryCreateTexture(m_raw, nullptr);
}
Status SharedTextureMemory::endAccess(Texture texture, SharedTextureMemoryEndAccessState * descriptor) {
	return static_cast<Status>(wgpuSharedTextureMemoryEndAccess(m_raw, texture, descriptor));
}
Status SharedTextureMemory::getProperties(SharedTextureMemoryProperties * properties) {
	return static_cast<Status>(wgpuSharedTextureMemoryGetProperties(m_raw, properties));
}
Bool SharedTextureMemory::isDeviceLost() {
	return wgpuSharedTextureMemoryIsDeviceLost(m_raw);
}
void SharedTextureMemory::setLabel(char const * label) {
	return wgpuSharedTextureMemorySetLabel(m_raw, label);
}
void SharedTextureMemory::setLabel2(StringView label) {
	return wgpuSharedTextureMemorySetLabel2(m_raw, label);
}
void SharedTextureMemory::addRef() {
	return wgpuSharedTextureMemoryAddRef(m_raw);
}
void SharedTextureMemory::release() {
	return wgpuSharedTextureMemoryRelease(m_raw);
}


// Methods of Surface
void Surface::configure(const SurfaceConfiguration& config) {
	return wgpuSurfaceConfigure(m_raw, &config);
}
Status Surface::getCapabilities(Adapter adapter, SurfaceCapabilities * capabilities) {
	return static_cast<Status>(wgpuSurfaceGetCapabilities(m_raw, adapter, capabilities));
}
void Surface::getCurrentTexture(SurfaceTexture * surfaceTexture) {
	return wgpuSurfaceGetCurrentTexture(m_raw, surfaceTexture);
}
TextureFormat Surface::getPreferredFormat(Adapter adapter) {
	return static_cast<TextureFormat>(wgpuSurfaceGetPreferredFormat(m_raw, adapter));
}
void Surface::present() {
	return wgpuSurfacePresent(m_raw);
}
void Surface::setLabel(char const * label) {
	return wgpuSurfaceSetLabel(m_raw, label);
}
void Surface::setLabel2(StringView label) {
	return wgpuSurfaceSetLabel2(m_raw, label);
}
void Surface::unconfigure() {
	return wgpuSurfaceUnconfigure(m_raw);
}
void Surface::addRef() {
	return wgpuSurfaceAddRef(m_raw);
}
void Surface::release() {
	return wgpuSurfaceRelease(m_raw);
}


// Methods of SwapChain
Texture SwapChain::getCurrentTexture() {
	return wgpuSwapChainGetCurrentTexture(m_raw);
}
TextureView SwapChain::getCurrentTextureView() {
	return wgpuSwapChainGetCurrentTextureView(m_raw);
}
void SwapChain::present() {
	return wgpuSwapChainPresent(m_raw);
}
void SwapChain::addRef() {
	return wgpuSwapChainAddRef(m_raw);
}
void SwapChain::release() {
	return wgpuSwapChainRelease(m_raw);
}


// Methods of Texture
TextureView Texture::createErrorView(const TextureViewDescriptor& descriptor) {
	return wgpuTextureCreateErrorView(m_raw, &descriptor);
}
TextureView Texture::createErrorView() {
	return wgpuTextureCreateErrorView(m_raw, nullptr);
}
TextureView Texture::createView(const TextureViewDescriptor& descriptor) {
	return wgpuTextureCreateView(m_raw, &descriptor);
}
TextureView Texture::createView() {
	return wgpuTextureCreateView(m_raw, nullptr);
}
void Texture::destroy() {
	return wgpuTextureDestroy(m_raw);
}
uint32_t Texture::getDepthOrArrayLayers() {
	return wgpuTextureGetDepthOrArrayLayers(m_raw);
}
TextureDimension Texture::getDimension() {
	return static_cast<TextureDimension>(wgpuTextureGetDimension(m_raw));
}
TextureFormat Texture::getFormat() {
	return static_cast<TextureFormat>(wgpuTextureGetFormat(m_raw));
}
uint32_t Texture::getHeight() {
	return wgpuTextureGetHeight(m_raw);
}
uint32_t Texture::getMipLevelCount() {
	return wgpuTextureGetMipLevelCount(m_raw);
}
uint32_t Texture::getSampleCount() {
	return wgpuTextureGetSampleCount(m_raw);
}
TextureUsage Texture::getUsage() {
	return static_cast<TextureUsage>(wgpuTextureGetUsage(m_raw));
}
uint32_t Texture::getWidth() {
	return wgpuTextureGetWidth(m_raw);
}
void Texture::setLabel(char const * label) {
	return wgpuTextureSetLabel(m_raw, label);
}
void Texture::setLabel2(StringView label) {
	return wgpuTextureSetLabel2(m_raw, label);
}
void Texture::addRef() {
	return wgpuTextureAddRef(m_raw);
}
void Texture::release() {
	return wgpuTextureRelease(m_raw);
}


// Methods of TextureView
void TextureView::setLabel(char const * label) {
	return wgpuTextureViewSetLabel(m_raw, label);
}
void TextureView::setLabel2(StringView label) {
	return wgpuTextureViewSetLabel2(m_raw, label);
}
void TextureView::addRef() {
	return wgpuTextureViewAddRef(m_raw);
}
void TextureView::release() {
	return wgpuTextureViewRelease(m_raw);
}



// Extra implementations
Adapter Instance::requestAdapter(const RequestAdapterOptions& options) {
	Adapter adapter = nullptr;
	bool requestEnded = false;
	
	auto onAdapterRequestEnded = [&adapter, &requestEnded](RequestAdapterStatus status, Adapter _adapter, char const * message) {
		if (status == RequestAdapterStatus::Success) {
			adapter = _adapter;
		} else {
			std::cout << "Could not get WebGPU adapter: " << message << std::endl;
		}
		requestEnded = true;
	};

	auto h = requestAdapter(options, onAdapterRequestEnded);
	
#if __EMSCRIPTEN__
	while (!requestEnded) {
		emscripten_sleep(100);
	}
#endif

	assert(requestEnded);
	return adapter;
}

Device Adapter::requestDevice(const DeviceDescriptor& descriptor) {
	WGPUDevice device = nullptr;
	bool requestEnded = false;

	auto onDeviceRequestEnded = [&device, &requestEnded](RequestDeviceStatus status, Device _device, char const * message) {
		if (status == RequestDeviceStatus::Success) {
			device = _device;
		} else {
			std::cout << "Could not get WebGPU adapter: " << message << std::endl;
		}
		requestEnded = true;
	};

	auto h = requestDevice(descriptor, onDeviceRequestEnded);

#if __EMSCRIPTEN__
	while (!requestEnded) {
		emscripten_sleep(100);
	}
#endif

	assert(requestEnded);
	return device;
}

#endif // WEBGPU_CPP_IMPLEMENTATION

#undef HANDLE
#undef DESCRIPTOR
#undef ENUM
#undef ENUM_ENTRY
#undef END

} // namespace wgpu
